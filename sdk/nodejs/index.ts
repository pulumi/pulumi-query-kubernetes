// Copyright 2016-2019, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
//

import * as k8s from "@pulumi/kubernetes";
import * as pulumi from "@pulumi/pulumi";
import { Resource } from "@pulumi/pulumi";
import { ResolvedResource } from "@pulumi/pulumi/queryable";
import { invoke, streamInvoke } from "@pulumi/pulumi/runtime";
import * as query from "@pulumi/query";
import { AsyncIterable } from "@pulumi/query/interfaces";
import * as rx from "rxjs";
import { map, scan } from "rxjs/operators";

//
// Implementation of `list`.
//

export function list(apiVersion: "admissionregistration.k8s.io/v1", kind: "MutatingWebhookConfiguration"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1.MutatingWebhookConfiguration>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1", kind: "MutatingWebhookConfigurationList"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1.MutatingWebhookConfigurationList>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1", kind: "ValidatingWebhookConfiguration"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1.ValidatingWebhookConfiguration>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1", kind: "ValidatingWebhookConfigurationList"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1.ValidatingWebhookConfigurationList>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "MutatingWebhookConfiguration"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1beta1.MutatingWebhookConfiguration>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "MutatingWebhookConfigurationList"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1beta1.MutatingWebhookConfigurationList>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "ValidatingWebhookConfiguration"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1beta1.ValidatingWebhookConfiguration>>;
export function list(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "ValidatingWebhookConfigurationList"): query.AsyncQueryable<ResolvedResource<k8s.admissionregistration.v1beta1.ValidatingWebhookConfigurationList>>;
export function list(apiVersion: "apiextensions.k8s.io/v1", kind: "CustomResourceDefinition"): query.AsyncQueryable<ResolvedResource<k8s.apiextensions.v1.CustomResourceDefinition>>;
export function list(apiVersion: "apiextensions.k8s.io/v1", kind: "CustomResourceDefinitionList"): query.AsyncQueryable<ResolvedResource<k8s.apiextensions.v1.CustomResourceDefinitionList>>;
export function list(apiVersion: "apiextensions.k8s.io/v1beta1", kind: "CustomResourceDefinition"): query.AsyncQueryable<ResolvedResource<k8s.apiextensions.v1beta1.CustomResourceDefinition>>;
export function list(apiVersion: "apiextensions.k8s.io/v1beta1", kind: "CustomResourceDefinitionList"): query.AsyncQueryable<ResolvedResource<k8s.apiextensions.v1beta1.CustomResourceDefinitionList>>;
export function list(apiVersion: "apiregistration.k8s.io/v1", kind: "APIService"): query.AsyncQueryable<ResolvedResource<k8s.apiregistration.v1.APIService>>;
export function list(apiVersion: "apiregistration.k8s.io/v1", kind: "APIServiceList"): query.AsyncQueryable<ResolvedResource<k8s.apiregistration.v1.APIServiceList>>;
export function list(apiVersion: "apiregistration.k8s.io/v1beta1", kind: "APIService"): query.AsyncQueryable<ResolvedResource<k8s.apiregistration.v1beta1.APIService>>;
export function list(apiVersion: "apiregistration.k8s.io/v1beta1", kind: "APIServiceList"): query.AsyncQueryable<ResolvedResource<k8s.apiregistration.v1beta1.APIServiceList>>;
export function list(apiVersion: "apps/v1", kind: "ControllerRevision"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.ControllerRevision>>;
export function list(apiVersion: "apps/v1", kind: "ControllerRevisionList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.ControllerRevisionList>>;
export function list(apiVersion: "apps/v1", kind: "DaemonSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.DaemonSet>>;
export function list(apiVersion: "apps/v1", kind: "DaemonSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.DaemonSetList>>;
export function list(apiVersion: "apps/v1", kind: "Deployment"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.Deployment>>;
export function list(apiVersion: "apps/v1", kind: "DeploymentList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.DeploymentList>>;
export function list(apiVersion: "apps/v1", kind: "ReplicaSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.ReplicaSet>>;
export function list(apiVersion: "apps/v1", kind: "ReplicaSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.ReplicaSetList>>;
export function list(apiVersion: "apps/v1", kind: "StatefulSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.StatefulSet>>;
export function list(apiVersion: "apps/v1", kind: "StatefulSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1.StatefulSetList>>;
export function list(apiVersion: "apps/v1beta1", kind: "ControllerRevision"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.ControllerRevision>>;
export function list(apiVersion: "apps/v1beta1", kind: "ControllerRevisionList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.ControllerRevisionList>>;
export function list(apiVersion: "apps/v1beta1", kind: "Deployment"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.Deployment>>;
export function list(apiVersion: "apps/v1beta1", kind: "DeploymentList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.DeploymentList>>;
export function list(apiVersion: "apps/v1beta1", kind: "StatefulSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.StatefulSet>>;
export function list(apiVersion: "apps/v1beta1", kind: "StatefulSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta1.StatefulSetList>>;
export function list(apiVersion: "apps/v1beta2", kind: "ControllerRevision"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.ControllerRevision>>;
export function list(apiVersion: "apps/v1beta2", kind: "ControllerRevisionList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.ControllerRevisionList>>;
export function list(apiVersion: "apps/v1beta2", kind: "DaemonSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.DaemonSet>>;
export function list(apiVersion: "apps/v1beta2", kind: "DaemonSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.DaemonSetList>>;
export function list(apiVersion: "apps/v1beta2", kind: "Deployment"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.Deployment>>;
export function list(apiVersion: "apps/v1beta2", kind: "DeploymentList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.DeploymentList>>;
export function list(apiVersion: "apps/v1beta2", kind: "ReplicaSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.ReplicaSet>>;
export function list(apiVersion: "apps/v1beta2", kind: "ReplicaSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.ReplicaSetList>>;
export function list(apiVersion: "apps/v1beta2", kind: "StatefulSet"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.StatefulSet>>;
export function list(apiVersion: "apps/v1beta2", kind: "StatefulSetList"): query.AsyncQueryable<ResolvedResource<k8s.apps.v1beta2.StatefulSetList>>;
export function list(apiVersion: "auditregistration.k8s.io/v1alpha1", kind: "AuditSink"): query.AsyncQueryable<ResolvedResource<k8s.auditregistration.v1alpha1.AuditSink>>;
export function list(apiVersion: "auditregistration.k8s.io/v1alpha1", kind: "AuditSinkList"): query.AsyncQueryable<ResolvedResource<k8s.auditregistration.v1alpha1.AuditSinkList>>;
export function list(apiVersion: "authentication.k8s.io/v1", kind: "TokenRequest"): query.AsyncQueryable<ResolvedResource<k8s.authentication.v1.TokenRequest>>;
export function list(apiVersion: "authentication.k8s.io/v1", kind: "TokenReview"): query.AsyncQueryable<ResolvedResource<k8s.authentication.v1.TokenReview>>;
export function list(apiVersion: "authentication.k8s.io/v1beta1", kind: "TokenReview"): query.AsyncQueryable<ResolvedResource<k8s.authentication.v1beta1.TokenReview>>;
export function list(apiVersion: "authorization.k8s.io/v1", kind: "LocalSubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1.LocalSubjectAccessReview>>;
export function list(apiVersion: "authorization.k8s.io/v1", kind: "SelfSubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1.SelfSubjectAccessReview>>;
export function list(apiVersion: "authorization.k8s.io/v1", kind: "SelfSubjectRulesReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1.SelfSubjectRulesReview>>;
export function list(apiVersion: "authorization.k8s.io/v1", kind: "SubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1.SubjectAccessReview>>;
export function list(apiVersion: "authorization.k8s.io/v1beta1", kind: "LocalSubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1beta1.LocalSubjectAccessReview>>;
export function list(apiVersion: "authorization.k8s.io/v1beta1", kind: "SelfSubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1beta1.SelfSubjectAccessReview>>;
export function list(apiVersion: "authorization.k8s.io/v1beta1", kind: "SelfSubjectRulesReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1beta1.SelfSubjectRulesReview>>;
export function list(apiVersion: "authorization.k8s.io/v1beta1", kind: "SubjectAccessReview"): query.AsyncQueryable<ResolvedResource<k8s.authorization.v1beta1.SubjectAccessReview>>;
export function list(apiVersion: "autoscaling/v1", kind: "HorizontalPodAutoscaler"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v1.HorizontalPodAutoscaler>>;
export function list(apiVersion: "autoscaling/v1", kind: "HorizontalPodAutoscalerList"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v1.HorizontalPodAutoscalerList>>;
export function list(apiVersion: "autoscaling/v2beta1", kind: "HorizontalPodAutoscaler"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v2beta1.HorizontalPodAutoscaler>>;
export function list(apiVersion: "autoscaling/v2beta1", kind: "HorizontalPodAutoscalerList"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v2beta1.HorizontalPodAutoscalerList>>;
export function list(apiVersion: "autoscaling/v2beta2", kind: "HorizontalPodAutoscaler"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v2beta2.HorizontalPodAutoscaler>>;
export function list(apiVersion: "autoscaling/v2beta2", kind: "HorizontalPodAutoscalerList"): query.AsyncQueryable<ResolvedResource<k8s.autoscaling.v2beta2.HorizontalPodAutoscalerList>>;
export function list(apiVersion: "batch/v1", kind: "Job"): query.AsyncQueryable<ResolvedResource<k8s.batch.v1.Job>>;
export function list(apiVersion: "batch/v1", kind: "JobList"): query.AsyncQueryable<ResolvedResource<k8s.batch.v1.JobList>>;
export function list(apiVersion: "batch/v1beta1", kind: "CronJob"): query.AsyncQueryable<ResolvedResource<k8s.batch.v1beta1.CronJob>>;
export function list(apiVersion: "batch/v1beta1", kind: "CronJobList"): query.AsyncQueryable<ResolvedResource<k8s.batch.v1beta1.CronJobList>>;
export function list(apiVersion: "batch/v2alpha1", kind: "CronJob"): query.AsyncQueryable<ResolvedResource<k8s.batch.v2alpha1.CronJob>>;
export function list(apiVersion: "batch/v2alpha1", kind: "CronJobList"): query.AsyncQueryable<ResolvedResource<k8s.batch.v2alpha1.CronJobList>>;
export function list(apiVersion: "certificates.k8s.io/v1beta1", kind: "CertificateSigningRequest"): query.AsyncQueryable<ResolvedResource<k8s.certificates.v1beta1.CertificateSigningRequest>>;
export function list(apiVersion: "certificates.k8s.io/v1beta1", kind: "CertificateSigningRequestList"): query.AsyncQueryable<ResolvedResource<k8s.certificates.v1beta1.CertificateSigningRequestList>>;
export function list(apiVersion: "coordination.k8s.io/v1", kind: "Lease"): query.AsyncQueryable<ResolvedResource<k8s.coordination.v1.Lease>>;
export function list(apiVersion: "coordination.k8s.io/v1", kind: "LeaseList"): query.AsyncQueryable<ResolvedResource<k8s.coordination.v1.LeaseList>>;
export function list(apiVersion: "coordination.k8s.io/v1beta1", kind: "Lease"): query.AsyncQueryable<ResolvedResource<k8s.coordination.v1beta1.Lease>>;
export function list(apiVersion: "coordination.k8s.io/v1beta1", kind: "LeaseList"): query.AsyncQueryable<ResolvedResource<k8s.coordination.v1beta1.LeaseList>>;
export function list(apiVersion: "v1", kind: "Binding"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Binding>>;
export function list(apiVersion: "v1", kind: "ComponentStatus"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ComponentStatus>>;
export function list(apiVersion: "v1", kind: "ComponentStatusList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ComponentStatusList>>;
export function list(apiVersion: "v1", kind: "ConfigMap"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ConfigMap>>;
export function list(apiVersion: "v1", kind: "ConfigMapList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ConfigMapList>>;
export function list(apiVersion: "v1", kind: "Endpoints"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Endpoints>>;
export function list(apiVersion: "v1", kind: "EndpointsList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.EndpointsList>>;
export function list(apiVersion: "v1", kind: "Event"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Event>>;
export function list(apiVersion: "v1", kind: "EventList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.EventList>>;
export function list(apiVersion: "v1", kind: "LimitRange"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.LimitRange>>;
export function list(apiVersion: "v1", kind: "LimitRangeList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.LimitRangeList>>;
export function list(apiVersion: "v1", kind: "Namespace"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Namespace>>;
export function list(apiVersion: "v1", kind: "NamespaceList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.NamespaceList>>;
export function list(apiVersion: "v1", kind: "Node"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Node>>;
export function list(apiVersion: "v1", kind: "NodeList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.NodeList>>;
export function list(apiVersion: "v1", kind: "PersistentVolume"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PersistentVolume>>;
export function list(apiVersion: "v1", kind: "PersistentVolumeClaim"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PersistentVolumeClaim>>;
export function list(apiVersion: "v1", kind: "PersistentVolumeClaimList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PersistentVolumeClaimList>>;
export function list(apiVersion: "v1", kind: "PersistentVolumeList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PersistentVolumeList>>;
export function list(apiVersion: "v1", kind: "Pod"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Pod>>;
export function list(apiVersion: "v1", kind: "PodList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PodList>>;
export function list(apiVersion: "v1", kind: "PodTemplate"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PodTemplate>>;
export function list(apiVersion: "v1", kind: "PodTemplateList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.PodTemplateList>>;
export function list(apiVersion: "v1", kind: "ReplicationController"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ReplicationController>>;
export function list(apiVersion: "v1", kind: "ReplicationControllerList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ReplicationControllerList>>;
export function list(apiVersion: "v1", kind: "ResourceQuota"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ResourceQuota>>;
export function list(apiVersion: "v1", kind: "ResourceQuotaList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ResourceQuotaList>>;
export function list(apiVersion: "v1", kind: "Secret"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Secret>>;
export function list(apiVersion: "v1", kind: "SecretList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.SecretList>>;
export function list(apiVersion: "v1", kind: "Service"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.Service>>;
export function list(apiVersion: "v1", kind: "ServiceAccount"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ServiceAccount>>;
export function list(apiVersion: "v1", kind: "ServiceAccountList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ServiceAccountList>>;
export function list(apiVersion: "v1", kind: "ServiceList"): query.AsyncQueryable<ResolvedResource<k8s.core.v1.ServiceList>>;
export function list(apiVersion: "discovery.k8s.io/v1alpha1", kind: "EndpointSlice"): query.AsyncQueryable<ResolvedResource<k8s.discovery.v1alpha1.EndpointSlice>>;
export function list(apiVersion: "discovery.k8s.io/v1alpha1", kind: "EndpointSliceList"): query.AsyncQueryable<ResolvedResource<k8s.discovery.v1alpha1.EndpointSliceList>>;
export function list(apiVersion: "events.k8s.io/v1beta1", kind: "Event"): query.AsyncQueryable<ResolvedResource<k8s.events.v1beta1.Event>>;
export function list(apiVersion: "events.k8s.io/v1beta1", kind: "EventList"): query.AsyncQueryable<ResolvedResource<k8s.events.v1beta1.EventList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "DaemonSet"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.DaemonSet>>;
export function list(apiVersion: "extensions/v1beta1", kind: "DaemonSetList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.DaemonSetList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "Deployment"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.Deployment>>;
export function list(apiVersion: "extensions/v1beta1", kind: "DeploymentList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.DeploymentList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "Ingress"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.Ingress>>;
export function list(apiVersion: "extensions/v1beta1", kind: "IngressList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.IngressList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "NetworkPolicy"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.NetworkPolicy>>;
export function list(apiVersion: "extensions/v1beta1", kind: "NetworkPolicyList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.NetworkPolicyList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "PodSecurityPolicy"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.PodSecurityPolicy>>;
export function list(apiVersion: "extensions/v1beta1", kind: "PodSecurityPolicyList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.PodSecurityPolicyList>>;
export function list(apiVersion: "extensions/v1beta1", kind: "ReplicaSet"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.ReplicaSet>>;
export function list(apiVersion: "extensions/v1beta1", kind: "ReplicaSetList"): query.AsyncQueryable<ResolvedResource<k8s.extensions.v1beta1.ReplicaSetList>>;
export function list(apiVersion: "v1", kind: "Status"): query.AsyncQueryable<ResolvedResource<k8s.meta.v1.Status>>;
export function list(apiVersion: "networking.k8s.io/v1", kind: "NetworkPolicy"): query.AsyncQueryable<ResolvedResource<k8s.networking.v1.NetworkPolicy>>;
export function list(apiVersion: "networking.k8s.io/v1", kind: "NetworkPolicyList"): query.AsyncQueryable<ResolvedResource<k8s.networking.v1.NetworkPolicyList>>;
export function list(apiVersion: "networking.k8s.io/v1beta1", kind: "Ingress"): query.AsyncQueryable<ResolvedResource<k8s.networking.v1beta1.Ingress>>;
export function list(apiVersion: "networking.k8s.io/v1beta1", kind: "IngressList"): query.AsyncQueryable<ResolvedResource<k8s.networking.v1beta1.IngressList>>;
export function list(apiVersion: "node.k8s.io/v1alpha1", kind: "RuntimeClass"): query.AsyncQueryable<ResolvedResource<k8s.node.v1alpha1.RuntimeClass>>;
export function list(apiVersion: "node.k8s.io/v1alpha1", kind: "RuntimeClassList"): query.AsyncQueryable<ResolvedResource<k8s.node.v1alpha1.RuntimeClassList>>;
export function list(apiVersion: "node.k8s.io/v1beta1", kind: "RuntimeClass"): query.AsyncQueryable<ResolvedResource<k8s.node.v1beta1.RuntimeClass>>;
export function list(apiVersion: "node.k8s.io/v1beta1", kind: "RuntimeClassList"): query.AsyncQueryable<ResolvedResource<k8s.node.v1beta1.RuntimeClassList>>;
export function list(apiVersion: "policy/v1beta1", kind: "PodDisruptionBudget"): query.AsyncQueryable<ResolvedResource<k8s.policy.v1beta1.PodDisruptionBudget>>;
export function list(apiVersion: "policy/v1beta1", kind: "PodDisruptionBudgetList"): query.AsyncQueryable<ResolvedResource<k8s.policy.v1beta1.PodDisruptionBudgetList>>;
export function list(apiVersion: "policy/v1beta1", kind: "PodSecurityPolicy"): query.AsyncQueryable<ResolvedResource<k8s.policy.v1beta1.PodSecurityPolicy>>;
export function list(apiVersion: "policy/v1beta1", kind: "PodSecurityPolicyList"): query.AsyncQueryable<ResolvedResource<k8s.policy.v1beta1.PodSecurityPolicyList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRole"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.ClusterRole>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.ClusterRoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.ClusterRoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.ClusterRoleList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "Role"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.Role>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.RoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.RoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1.RoleList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRole"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.ClusterRole>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "Role"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.Role>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.RoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.RoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1alpha1.RoleList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRole"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.ClusterRole>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "Role"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.Role>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleBinding"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.RoleBinding>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleBindingList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.RoleBindingList>>;
export function list(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleList"): query.AsyncQueryable<ResolvedResource<k8s.rbac.v1beta1.RoleList>>;
export function list(apiVersion: "scheduling.k8s.io/v1", kind: "PriorityClass"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1.PriorityClass>>;
export function list(apiVersion: "scheduling.k8s.io/v1", kind: "PriorityClassList"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1.PriorityClassList>>;
export function list(apiVersion: "scheduling.k8s.io/v1alpha1", kind: "PriorityClass"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1alpha1.PriorityClass>>;
export function list(apiVersion: "scheduling.k8s.io/v1alpha1", kind: "PriorityClassList"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1alpha1.PriorityClassList>>;
export function list(apiVersion: "scheduling.k8s.io/v1beta1", kind: "PriorityClass"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1beta1.PriorityClass>>;
export function list(apiVersion: "scheduling.k8s.io/v1beta1", kind: "PriorityClassList"): query.AsyncQueryable<ResolvedResource<k8s.scheduling.v1beta1.PriorityClassList>>;
export function list(apiVersion: "settings.k8s.io/v1alpha1", kind: "PodPreset"): query.AsyncQueryable<ResolvedResource<k8s.settings.v1alpha1.PodPreset>>;
export function list(apiVersion: "settings.k8s.io/v1alpha1", kind: "PodPresetList"): query.AsyncQueryable<ResolvedResource<k8s.settings.v1alpha1.PodPresetList>>;
export function list(apiVersion: "storage.k8s.io/v1", kind: "StorageClass"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1.StorageClass>>;
export function list(apiVersion: "storage.k8s.io/v1", kind: "StorageClassList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1.StorageClassList>>;
export function list(apiVersion: "storage.k8s.io/v1", kind: "VolumeAttachment"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1.VolumeAttachment>>;
export function list(apiVersion: "storage.k8s.io/v1", kind: "VolumeAttachmentList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1.VolumeAttachmentList>>;
export function list(apiVersion: "storage.k8s.io/v1alpha1", kind: "VolumeAttachment"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1alpha1.VolumeAttachment>>;
export function list(apiVersion: "storage.k8s.io/v1alpha1", kind: "VolumeAttachmentList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1alpha1.VolumeAttachmentList>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "CSIDriver"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.CSIDriver>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "CSIDriverList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.CSIDriverList>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "CSINode"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.CSINode>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "CSINodeList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.CSINodeList>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "StorageClass"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.StorageClass>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "StorageClassList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.StorageClassList>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "VolumeAttachment"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.VolumeAttachment>>;
export function list(apiVersion: "storage.k8s.io/v1beta1", kind: "VolumeAttachmentList"): query.AsyncQueryable<ResolvedResource<k8s.storage.v1beta1.VolumeAttachmentList>>;
export function list<U extends Resource>(apiVersion: string, kind: string): query.AsyncQueryable<ResolvedResource<U>> {

    let gvk: { group: string; version: string; kind: string };
    let pulumiType: string;
    let filter: (obj: any) => obj is ResolvedResource<U>;
    switch (`${apiVersion}::${kind}`) {
        case "admissionregistration.k8s.io/v1::MutatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfiguration" }
                : { group, version, kind: "MutatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1.MutatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::MutatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfigurationList" }
                : { group, version, kind: "MutatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1.MutatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::ValidatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfiguration" }
                : { group, version, kind: "ValidatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1.ValidatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::ValidatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfigurationList" }
                : { group, version, kind: "ValidatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1.ValidatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::MutatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfiguration" }
                : { group, version, kind: "MutatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1beta1.MutatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::MutatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfigurationList" }
                : { group, version, kind: "MutatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1beta1.MutatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::ValidatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfiguration" }
                : { group, version, kind: "ValidatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1beta1.ValidatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::ValidatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfigurationList" }
                : { group, version, kind: "ValidatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1beta1.ValidatingWebhookConfigurationList.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1::CustomResourceDefinition": {
            const [group, version] = "apiextensions.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinition" }
                : { group, version, kind: "CustomResourceDefinition" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition";
            filter = <any>k8s.apiextensions.v1.CustomResourceDefinition.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1::CustomResourceDefinitionList": {
            const [group, version] = "apiextensions.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinitionList" }
                : { group, version, kind: "CustomResourceDefinitionList" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinitionList";
            filter = <any>k8s.apiextensions.v1.CustomResourceDefinitionList.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1beta1::CustomResourceDefinition": {
            const [group, version] = "apiextensions.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinition" }
                : { group, version, kind: "CustomResourceDefinition" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinition";
            filter = <any>k8s.apiextensions.v1beta1.CustomResourceDefinition.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1beta1::CustomResourceDefinitionList": {
            const [group, version] = "apiextensions.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinitionList" }
                : { group, version, kind: "CustomResourceDefinitionList" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinitionList";
            filter = <any>k8s.apiextensions.v1beta1.CustomResourceDefinitionList.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1::APIService": {
            const [group, version] = "apiregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIService" }
                : { group, version, kind: "APIService" };
            pulumiType = "kubernetes:apiregistration/v1:APIService";
            filter = <any>k8s.apiregistration.v1.APIService.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1::APIServiceList": {
            const [group, version] = "apiregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIServiceList" }
                : { group, version, kind: "APIServiceList" };
            pulumiType = "kubernetes:apiregistration/v1:APIServiceList";
            filter = <any>k8s.apiregistration.v1.APIServiceList.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1beta1::APIService": {
            const [group, version] = "apiregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIService" }
                : { group, version, kind: "APIService" };
            pulumiType = "kubernetes:apiregistration/v1beta1:APIService";
            filter = <any>k8s.apiregistration.v1beta1.APIService.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1beta1::APIServiceList": {
            const [group, version] = "apiregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIServiceList" }
                : { group, version, kind: "APIServiceList" };
            pulumiType = "kubernetes:apiregistration/v1beta1:APIServiceList";
            filter = <any>k8s.apiregistration.v1beta1.APIServiceList.isInstance;
            break;
        }
        case "apps/v1::ControllerRevision": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1:ControllerRevision";
            filter = <any>k8s.apps.v1.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1::ControllerRevisionList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1:ControllerRevisionList";
            filter = <any>k8s.apps.v1.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1::DaemonSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:apps/v1:DaemonSet";
            filter = <any>k8s.apps.v1.DaemonSet.isInstance;
            break;
        }
        case "apps/v1::DaemonSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:apps/v1:DaemonSetList";
            filter = <any>k8s.apps.v1.DaemonSetList.isInstance;
            break;
        }
        case "apps/v1::Deployment": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1:Deployment";
            filter = <any>k8s.apps.v1.Deployment.isInstance;
            break;
        }
        case "apps/v1::DeploymentList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1:DeploymentList";
            filter = <any>k8s.apps.v1.DeploymentList.isInstance;
            break;
        }
        case "apps/v1::ReplicaSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:apps/v1:ReplicaSet";
            filter = <any>k8s.apps.v1.ReplicaSet.isInstance;
            break;
        }
        case "apps/v1::ReplicaSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:apps/v1:ReplicaSetList";
            filter = <any>k8s.apps.v1.ReplicaSetList.isInstance;
            break;
        }
        case "apps/v1::StatefulSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1:StatefulSet";
            filter = <any>k8s.apps.v1.StatefulSet.isInstance;
            break;
        }
        case "apps/v1::StatefulSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1:StatefulSetList";
            filter = <any>k8s.apps.v1.StatefulSetList.isInstance;
            break;
        }
        case "apps/v1beta1::ControllerRevision": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1beta1:ControllerRevision";
            filter = <any>k8s.apps.v1beta1.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1beta1::ControllerRevisionList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1beta1:ControllerRevisionList";
            filter = <any>k8s.apps.v1beta1.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1beta1::Deployment": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1beta1:Deployment";
            filter = <any>k8s.apps.v1beta1.Deployment.isInstance;
            break;
        }
        case "apps/v1beta1::DeploymentList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1beta1:DeploymentList";
            filter = <any>k8s.apps.v1beta1.DeploymentList.isInstance;
            break;
        }
        case "apps/v1beta1::StatefulSet": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1beta1:StatefulSet";
            filter = <any>k8s.apps.v1beta1.StatefulSet.isInstance;
            break;
        }
        case "apps/v1beta1::StatefulSetList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1beta1:StatefulSetList";
            filter = <any>k8s.apps.v1beta1.StatefulSetList.isInstance;
            break;
        }
        case "apps/v1beta2::ControllerRevision": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1beta2:ControllerRevision";
            filter = <any>k8s.apps.v1beta2.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1beta2::ControllerRevisionList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1beta2:ControllerRevisionList";
            filter = <any>k8s.apps.v1beta2.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1beta2::DaemonSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:apps/v1beta2:DaemonSet";
            filter = <any>k8s.apps.v1beta2.DaemonSet.isInstance;
            break;
        }
        case "apps/v1beta2::DaemonSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:apps/v1beta2:DaemonSetList";
            filter = <any>k8s.apps.v1beta2.DaemonSetList.isInstance;
            break;
        }
        case "apps/v1beta2::Deployment": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1beta2:Deployment";
            filter = <any>k8s.apps.v1beta2.Deployment.isInstance;
            break;
        }
        case "apps/v1beta2::DeploymentList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1beta2:DeploymentList";
            filter = <any>k8s.apps.v1beta2.DeploymentList.isInstance;
            break;
        }
        case "apps/v1beta2::ReplicaSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:apps/v1beta2:ReplicaSet";
            filter = <any>k8s.apps.v1beta2.ReplicaSet.isInstance;
            break;
        }
        case "apps/v1beta2::ReplicaSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:apps/v1beta2:ReplicaSetList";
            filter = <any>k8s.apps.v1beta2.ReplicaSetList.isInstance;
            break;
        }
        case "apps/v1beta2::StatefulSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1beta2:StatefulSet";
            filter = <any>k8s.apps.v1beta2.StatefulSet.isInstance;
            break;
        }
        case "apps/v1beta2::StatefulSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1beta2:StatefulSetList";
            filter = <any>k8s.apps.v1beta2.StatefulSetList.isInstance;
            break;
        }
        case "auditregistration.k8s.io/v1alpha1::AuditSink": {
            const [group, version] = "auditregistration.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "AuditSink" }
                : { group, version, kind: "AuditSink" };
            pulumiType = "kubernetes:auditregistration.k8s.io/v1alpha1:AuditSink";
            filter = <any>k8s.auditregistration.v1alpha1.AuditSink.isInstance;
            break;
        }
        case "auditregistration.k8s.io/v1alpha1::AuditSinkList": {
            const [group, version] = "auditregistration.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "AuditSinkList" }
                : { group, version, kind: "AuditSinkList" };
            pulumiType = "kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkList";
            filter = <any>k8s.auditregistration.v1alpha1.AuditSinkList.isInstance;
            break;
        }
        case "authentication.k8s.io/v1::TokenRequest": {
            const [group, version] = "authentication.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenRequest" }
                : { group, version, kind: "TokenRequest" };
            pulumiType = "kubernetes:authentication.k8s.io/v1:TokenRequest";
            filter = <any>k8s.authentication.v1.TokenRequest.isInstance;
            break;
        }
        case "authentication.k8s.io/v1::TokenReview": {
            const [group, version] = "authentication.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenReview" }
                : { group, version, kind: "TokenReview" };
            pulumiType = "kubernetes:authentication.k8s.io/v1:TokenReview";
            filter = <any>k8s.authentication.v1.TokenReview.isInstance;
            break;
        }
        case "authentication.k8s.io/v1beta1::TokenReview": {
            const [group, version] = "authentication.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenReview" }
                : { group, version, kind: "TokenReview" };
            pulumiType = "kubernetes:authentication.k8s.io/v1beta1:TokenReview";
            filter = <any>k8s.authentication.v1beta1.TokenReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::LocalSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LocalSubjectAccessReview" }
                : { group, version, kind: "LocalSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:LocalSubjectAccessReview";
            filter = <any>k8s.authorization.v1.LocalSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SelfSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectAccessReview" }
                : { group, version, kind: "SelfSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SelfSubjectAccessReview";
            filter = <any>k8s.authorization.v1.SelfSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SelfSubjectRulesReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectRulesReview" }
                : { group, version, kind: "SelfSubjectRulesReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SelfSubjectRulesReview";
            filter = <any>k8s.authorization.v1.SelfSubjectRulesReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SubjectAccessReview" }
                : { group, version, kind: "SubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SubjectAccessReview";
            filter = <any>k8s.authorization.v1.SubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::LocalSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LocalSubjectAccessReview" }
                : { group, version, kind: "LocalSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:LocalSubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.LocalSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SelfSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectAccessReview" }
                : { group, version, kind: "SelfSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SelfSubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.SelfSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SelfSubjectRulesReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectRulesReview" }
                : { group, version, kind: "SelfSubjectRulesReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SelfSubjectRulesReview";
            filter = <any>k8s.authorization.v1beta1.SelfSubjectRulesReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SubjectAccessReview" }
                : { group, version, kind: "SubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.SubjectAccessReview.isInstance;
            break;
        }
        case "autoscaling/v1::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v1:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v1.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v1::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v1:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v1.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "autoscaling/v2beta1::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v2beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v2beta1.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v2beta1::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v2beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v2beta1.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "autoscaling/v2beta2::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v2beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v2beta2:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v2beta2.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v2beta2::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v2beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v2beta2:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v2beta2.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "batch/v1::Job": {
            const [group, version] = "batch/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Job" }
                : { group, version, kind: "Job" };
            pulumiType = "kubernetes:batch/v1:Job";
            filter = <any>k8s.batch.v1.Job.isInstance;
            break;
        }
        case "batch/v1::JobList": {
            const [group, version] = "batch/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "JobList" }
                : { group, version, kind: "JobList" };
            pulumiType = "kubernetes:batch/v1:JobList";
            filter = <any>k8s.batch.v1.JobList.isInstance;
            break;
        }
        case "batch/v1beta1::CronJob": {
            const [group, version] = "batch/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJob" }
                : { group, version, kind: "CronJob" };
            pulumiType = "kubernetes:batch/v1beta1:CronJob";
            filter = <any>k8s.batch.v1beta1.CronJob.isInstance;
            break;
        }
        case "batch/v1beta1::CronJobList": {
            const [group, version] = "batch/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJobList" }
                : { group, version, kind: "CronJobList" };
            pulumiType = "kubernetes:batch/v1beta1:CronJobList";
            filter = <any>k8s.batch.v1beta1.CronJobList.isInstance;
            break;
        }
        case "batch/v2alpha1::CronJob": {
            const [group, version] = "batch/v2alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJob" }
                : { group, version, kind: "CronJob" };
            pulumiType = "kubernetes:batch/v2alpha1:CronJob";
            filter = <any>k8s.batch.v2alpha1.CronJob.isInstance;
            break;
        }
        case "batch/v2alpha1::CronJobList": {
            const [group, version] = "batch/v2alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJobList" }
                : { group, version, kind: "CronJobList" };
            pulumiType = "kubernetes:batch/v2alpha1:CronJobList";
            filter = <any>k8s.batch.v2alpha1.CronJobList.isInstance;
            break;
        }
        case "certificates.k8s.io/v1beta1::CertificateSigningRequest": {
            const [group, version] = "certificates.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CertificateSigningRequest" }
                : { group, version, kind: "CertificateSigningRequest" };
            pulumiType = "kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequest";
            filter = <any>k8s.certificates.v1beta1.CertificateSigningRequest.isInstance;
            break;
        }
        case "certificates.k8s.io/v1beta1::CertificateSigningRequestList": {
            const [group, version] = "certificates.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CertificateSigningRequestList" }
                : { group, version, kind: "CertificateSigningRequestList" };
            pulumiType = "kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequestList";
            filter = <any>k8s.certificates.v1beta1.CertificateSigningRequestList.isInstance;
            break;
        }
        case "coordination.k8s.io/v1::Lease": {
            const [group, version] = "coordination.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Lease" }
                : { group, version, kind: "Lease" };
            pulumiType = "kubernetes:coordination.k8s.io/v1:Lease";
            filter = <any>k8s.coordination.v1.Lease.isInstance;
            break;
        }
        case "coordination.k8s.io/v1::LeaseList": {
            const [group, version] = "coordination.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LeaseList" }
                : { group, version, kind: "LeaseList" };
            pulumiType = "kubernetes:coordination.k8s.io/v1:LeaseList";
            filter = <any>k8s.coordination.v1.LeaseList.isInstance;
            break;
        }
        case "coordination.k8s.io/v1beta1::Lease": {
            const [group, version] = "coordination.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Lease" }
                : { group, version, kind: "Lease" };
            pulumiType = "kubernetes:coordination.k8s.io/v1beta1:Lease";
            filter = <any>k8s.coordination.v1beta1.Lease.isInstance;
            break;
        }
        case "coordination.k8s.io/v1beta1::LeaseList": {
            const [group, version] = "coordination.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LeaseList" }
                : { group, version, kind: "LeaseList" };
            pulumiType = "kubernetes:coordination.k8s.io/v1beta1:LeaseList";
            filter = <any>k8s.coordination.v1beta1.LeaseList.isInstance;
            break;
        }
        case "v1::Binding": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Binding" }
                : { group, version, kind: "Binding" };
            pulumiType = "kubernetes:core/v1:Binding";
            filter = <any>k8s.core.v1.Binding.isInstance;
            break;
        }
        case "v1::ComponentStatus": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ComponentStatus" }
                : { group, version, kind: "ComponentStatus" };
            pulumiType = "kubernetes:core/v1:ComponentStatus";
            filter = <any>k8s.core.v1.ComponentStatus.isInstance;
            break;
        }
        case "v1::ComponentStatusList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ComponentStatusList" }
                : { group, version, kind: "ComponentStatusList" };
            pulumiType = "kubernetes:core/v1:ComponentStatusList";
            filter = <any>k8s.core.v1.ComponentStatusList.isInstance;
            break;
        }
        case "v1::ConfigMap": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ConfigMap" }
                : { group, version, kind: "ConfigMap" };
            pulumiType = "kubernetes:core/v1:ConfigMap";
            filter = <any>k8s.core.v1.ConfigMap.isInstance;
            break;
        }
        case "v1::ConfigMapList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ConfigMapList" }
                : { group, version, kind: "ConfigMapList" };
            pulumiType = "kubernetes:core/v1:ConfigMapList";
            filter = <any>k8s.core.v1.ConfigMapList.isInstance;
            break;
        }
        case "v1::Endpoints": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Endpoints" }
                : { group, version, kind: "Endpoints" };
            pulumiType = "kubernetes:core/v1:Endpoints";
            filter = <any>k8s.core.v1.Endpoints.isInstance;
            break;
        }
        case "v1::EndpointsList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointsList" }
                : { group, version, kind: "EndpointsList" };
            pulumiType = "kubernetes:core/v1:EndpointsList";
            filter = <any>k8s.core.v1.EndpointsList.isInstance;
            break;
        }
        case "v1::Event": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Event" }
                : { group, version, kind: "Event" };
            pulumiType = "kubernetes:core/v1:Event";
            filter = <any>k8s.core.v1.Event.isInstance;
            break;
        }
        case "v1::EventList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EventList" }
                : { group, version, kind: "EventList" };
            pulumiType = "kubernetes:core/v1:EventList";
            filter = <any>k8s.core.v1.EventList.isInstance;
            break;
        }
        case "v1::LimitRange": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LimitRange" }
                : { group, version, kind: "LimitRange" };
            pulumiType = "kubernetes:core/v1:LimitRange";
            filter = <any>k8s.core.v1.LimitRange.isInstance;
            break;
        }
        case "v1::LimitRangeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LimitRangeList" }
                : { group, version, kind: "LimitRangeList" };
            pulumiType = "kubernetes:core/v1:LimitRangeList";
            filter = <any>k8s.core.v1.LimitRangeList.isInstance;
            break;
        }
        case "v1::Namespace": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Namespace" }
                : { group, version, kind: "Namespace" };
            pulumiType = "kubernetes:core/v1:Namespace";
            filter = <any>k8s.core.v1.Namespace.isInstance;
            break;
        }
        case "v1::NamespaceList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NamespaceList" }
                : { group, version, kind: "NamespaceList" };
            pulumiType = "kubernetes:core/v1:NamespaceList";
            filter = <any>k8s.core.v1.NamespaceList.isInstance;
            break;
        }
        case "v1::Node": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Node" }
                : { group, version, kind: "Node" };
            pulumiType = "kubernetes:core/v1:Node";
            filter = <any>k8s.core.v1.Node.isInstance;
            break;
        }
        case "v1::NodeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NodeList" }
                : { group, version, kind: "NodeList" };
            pulumiType = "kubernetes:core/v1:NodeList";
            filter = <any>k8s.core.v1.NodeList.isInstance;
            break;
        }
        case "v1::PersistentVolume": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolume" }
                : { group, version, kind: "PersistentVolume" };
            pulumiType = "kubernetes:core/v1:PersistentVolume";
            filter = <any>k8s.core.v1.PersistentVolume.isInstance;
            break;
        }
        case "v1::PersistentVolumeClaim": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeClaim" }
                : { group, version, kind: "PersistentVolumeClaim" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeClaim";
            filter = <any>k8s.core.v1.PersistentVolumeClaim.isInstance;
            break;
        }
        case "v1::PersistentVolumeClaimList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeClaimList" }
                : { group, version, kind: "PersistentVolumeClaimList" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeClaimList";
            filter = <any>k8s.core.v1.PersistentVolumeClaimList.isInstance;
            break;
        }
        case "v1::PersistentVolumeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeList" }
                : { group, version, kind: "PersistentVolumeList" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeList";
            filter = <any>k8s.core.v1.PersistentVolumeList.isInstance;
            break;
        }
        case "v1::Pod": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Pod" }
                : { group, version, kind: "Pod" };
            pulumiType = "kubernetes:core/v1:Pod";
            filter = <any>k8s.core.v1.Pod.isInstance;
            break;
        }
        case "v1::PodList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodList" }
                : { group, version, kind: "PodList" };
            pulumiType = "kubernetes:core/v1:PodList";
            filter = <any>k8s.core.v1.PodList.isInstance;
            break;
        }
        case "v1::PodTemplate": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodTemplate" }
                : { group, version, kind: "PodTemplate" };
            pulumiType = "kubernetes:core/v1:PodTemplate";
            filter = <any>k8s.core.v1.PodTemplate.isInstance;
            break;
        }
        case "v1::PodTemplateList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodTemplateList" }
                : { group, version, kind: "PodTemplateList" };
            pulumiType = "kubernetes:core/v1:PodTemplateList";
            filter = <any>k8s.core.v1.PodTemplateList.isInstance;
            break;
        }
        case "v1::ReplicationController": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicationController" }
                : { group, version, kind: "ReplicationController" };
            pulumiType = "kubernetes:core/v1:ReplicationController";
            filter = <any>k8s.core.v1.ReplicationController.isInstance;
            break;
        }
        case "v1::ReplicationControllerList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicationControllerList" }
                : { group, version, kind: "ReplicationControllerList" };
            pulumiType = "kubernetes:core/v1:ReplicationControllerList";
            filter = <any>k8s.core.v1.ReplicationControllerList.isInstance;
            break;
        }
        case "v1::ResourceQuota": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ResourceQuota" }
                : { group, version, kind: "ResourceQuota" };
            pulumiType = "kubernetes:core/v1:ResourceQuota";
            filter = <any>k8s.core.v1.ResourceQuota.isInstance;
            break;
        }
        case "v1::ResourceQuotaList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ResourceQuotaList" }
                : { group, version, kind: "ResourceQuotaList" };
            pulumiType = "kubernetes:core/v1:ResourceQuotaList";
            filter = <any>k8s.core.v1.ResourceQuotaList.isInstance;
            break;
        }
        case "v1::Secret": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Secret" }
                : { group, version, kind: "Secret" };
            pulumiType = "kubernetes:core/v1:Secret";
            filter = <any>k8s.core.v1.Secret.isInstance;
            break;
        }
        case "v1::SecretList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SecretList" }
                : { group, version, kind: "SecretList" };
            pulumiType = "kubernetes:core/v1:SecretList";
            filter = <any>k8s.core.v1.SecretList.isInstance;
            break;
        }
        case "v1::Service": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Service" }
                : { group, version, kind: "Service" };
            pulumiType = "kubernetes:core/v1:Service";
            filter = <any>k8s.core.v1.Service.isInstance;
            break;
        }
        case "v1::ServiceAccount": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceAccount" }
                : { group, version, kind: "ServiceAccount" };
            pulumiType = "kubernetes:core/v1:ServiceAccount";
            filter = <any>k8s.core.v1.ServiceAccount.isInstance;
            break;
        }
        case "v1::ServiceAccountList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceAccountList" }
                : { group, version, kind: "ServiceAccountList" };
            pulumiType = "kubernetes:core/v1:ServiceAccountList";
            filter = <any>k8s.core.v1.ServiceAccountList.isInstance;
            break;
        }
        case "v1::ServiceList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceList" }
                : { group, version, kind: "ServiceList" };
            pulumiType = "kubernetes:core/v1:ServiceList";
            filter = <any>k8s.core.v1.ServiceList.isInstance;
            break;
        }
        case "discovery.k8s.io/v1alpha1::EndpointSlice": {
            const [group, version] = "discovery.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointSlice" }
                : { group, version, kind: "EndpointSlice" };
            pulumiType = "kubernetes:discovery.k8s.io/v1alpha1:EndpointSlice";
            filter = <any>k8s.discovery.v1alpha1.EndpointSlice.isInstance;
            break;
        }
        case "discovery.k8s.io/v1alpha1::EndpointSliceList": {
            const [group, version] = "discovery.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointSliceList" }
                : { group, version, kind: "EndpointSliceList" };
            pulumiType = "kubernetes:discovery.k8s.io/v1alpha1:EndpointSliceList";
            filter = <any>k8s.discovery.v1alpha1.EndpointSliceList.isInstance;
            break;
        }
        case "events.k8s.io/v1beta1::Event": {
            const [group, version] = "events.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Event" }
                : { group, version, kind: "Event" };
            pulumiType = "kubernetes:events.k8s.io/v1beta1:Event";
            filter = <any>k8s.events.v1beta1.Event.isInstance;
            break;
        }
        case "events.k8s.io/v1beta1::EventList": {
            const [group, version] = "events.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EventList" }
                : { group, version, kind: "EventList" };
            pulumiType = "kubernetes:events.k8s.io/v1beta1:EventList";
            filter = <any>k8s.events.v1beta1.EventList.isInstance;
            break;
        }
        case "extensions/v1beta1::DaemonSet": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:extensions/v1beta1:DaemonSet";
            filter = <any>k8s.extensions.v1beta1.DaemonSet.isInstance;
            break;
        }
        case "extensions/v1beta1::DaemonSetList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:extensions/v1beta1:DaemonSetList";
            filter = <any>k8s.extensions.v1beta1.DaemonSetList.isInstance;
            break;
        }
        case "extensions/v1beta1::Deployment": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:extensions/v1beta1:Deployment";
            filter = <any>k8s.extensions.v1beta1.Deployment.isInstance;
            break;
        }
        case "extensions/v1beta1::DeploymentList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:extensions/v1beta1:DeploymentList";
            filter = <any>k8s.extensions.v1beta1.DeploymentList.isInstance;
            break;
        }
        case "extensions/v1beta1::Ingress": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Ingress" }
                : { group, version, kind: "Ingress" };
            pulumiType = "kubernetes:extensions/v1beta1:Ingress";
            filter = <any>k8s.extensions.v1beta1.Ingress.isInstance;
            break;
        }
        case "extensions/v1beta1::IngressList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "IngressList" }
                : { group, version, kind: "IngressList" };
            pulumiType = "kubernetes:extensions/v1beta1:IngressList";
            filter = <any>k8s.extensions.v1beta1.IngressList.isInstance;
            break;
        }
        case "extensions/v1beta1::NetworkPolicy": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicy" }
                : { group, version, kind: "NetworkPolicy" };
            pulumiType = "kubernetes:extensions/v1beta1:NetworkPolicy";
            filter = <any>k8s.extensions.v1beta1.NetworkPolicy.isInstance;
            break;
        }
        case "extensions/v1beta1::NetworkPolicyList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicyList" }
                : { group, version, kind: "NetworkPolicyList" };
            pulumiType = "kubernetes:extensions/v1beta1:NetworkPolicyList";
            filter = <any>k8s.extensions.v1beta1.NetworkPolicyList.isInstance;
            break;
        }
        case "extensions/v1beta1::PodSecurityPolicy": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicy" }
                : { group, version, kind: "PodSecurityPolicy" };
            pulumiType = "kubernetes:extensions/v1beta1:PodSecurityPolicy";
            filter = <any>k8s.extensions.v1beta1.PodSecurityPolicy.isInstance;
            break;
        }
        case "extensions/v1beta1::PodSecurityPolicyList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicyList" }
                : { group, version, kind: "PodSecurityPolicyList" };
            pulumiType = "kubernetes:extensions/v1beta1:PodSecurityPolicyList";
            filter = <any>k8s.extensions.v1beta1.PodSecurityPolicyList.isInstance;
            break;
        }
        case "extensions/v1beta1::ReplicaSet": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:extensions/v1beta1:ReplicaSet";
            filter = <any>k8s.extensions.v1beta1.ReplicaSet.isInstance;
            break;
        }
        case "extensions/v1beta1::ReplicaSetList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:extensions/v1beta1:ReplicaSetList";
            filter = <any>k8s.extensions.v1beta1.ReplicaSetList.isInstance;
            break;
        }
        case "v1::Status": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Status" }
                : { group, version, kind: "Status" };
            pulumiType = "kubernetes:core/v1:Status";
            filter = <any>k8s.meta.v1.Status.isInstance;
            break;
        }
        case "networking.k8s.io/v1::NetworkPolicy": {
            const [group, version] = "networking.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicy" }
                : { group, version, kind: "NetworkPolicy" };
            pulumiType = "kubernetes:networking.k8s.io/v1:NetworkPolicy";
            filter = <any>k8s.networking.v1.NetworkPolicy.isInstance;
            break;
        }
        case "networking.k8s.io/v1::NetworkPolicyList": {
            const [group, version] = "networking.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicyList" }
                : { group, version, kind: "NetworkPolicyList" };
            pulumiType = "kubernetes:networking.k8s.io/v1:NetworkPolicyList";
            filter = <any>k8s.networking.v1.NetworkPolicyList.isInstance;
            break;
        }
        case "networking.k8s.io/v1beta1::Ingress": {
            const [group, version] = "networking.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Ingress" }
                : { group, version, kind: "Ingress" };
            pulumiType = "kubernetes:networking.k8s.io/v1beta1:Ingress";
            filter = <any>k8s.networking.v1beta1.Ingress.isInstance;
            break;
        }
        case "networking.k8s.io/v1beta1::IngressList": {
            const [group, version] = "networking.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "IngressList" }
                : { group, version, kind: "IngressList" };
            pulumiType = "kubernetes:networking.k8s.io/v1beta1:IngressList";
            filter = <any>k8s.networking.v1beta1.IngressList.isInstance;
            break;
        }
        case "node.k8s.io/v1alpha1::RuntimeClass": {
            const [group, version] = "node.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClass" }
                : { group, version, kind: "RuntimeClass" };
            pulumiType = "kubernetes:node.k8s.io/v1alpha1:RuntimeClass";
            filter = <any>k8s.node.v1alpha1.RuntimeClass.isInstance;
            break;
        }
        case "node.k8s.io/v1alpha1::RuntimeClassList": {
            const [group, version] = "node.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClassList" }
                : { group, version, kind: "RuntimeClassList" };
            pulumiType = "kubernetes:node.k8s.io/v1alpha1:RuntimeClassList";
            filter = <any>k8s.node.v1alpha1.RuntimeClassList.isInstance;
            break;
        }
        case "node.k8s.io/v1beta1::RuntimeClass": {
            const [group, version] = "node.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClass" }
                : { group, version, kind: "RuntimeClass" };
            pulumiType = "kubernetes:node.k8s.io/v1beta1:RuntimeClass";
            filter = <any>k8s.node.v1beta1.RuntimeClass.isInstance;
            break;
        }
        case "node.k8s.io/v1beta1::RuntimeClassList": {
            const [group, version] = "node.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClassList" }
                : { group, version, kind: "RuntimeClassList" };
            pulumiType = "kubernetes:node.k8s.io/v1beta1:RuntimeClassList";
            filter = <any>k8s.node.v1beta1.RuntimeClassList.isInstance;
            break;
        }
        case "policy/v1beta1::PodDisruptionBudget": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodDisruptionBudget" }
                : { group, version, kind: "PodDisruptionBudget" };
            pulumiType = "kubernetes:policy/v1beta1:PodDisruptionBudget";
            filter = <any>k8s.policy.v1beta1.PodDisruptionBudget.isInstance;
            break;
        }
        case "policy/v1beta1::PodDisruptionBudgetList": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodDisruptionBudgetList" }
                : { group, version, kind: "PodDisruptionBudgetList" };
            pulumiType = "kubernetes:policy/v1beta1:PodDisruptionBudgetList";
            filter = <any>k8s.policy.v1beta1.PodDisruptionBudgetList.isInstance;
            break;
        }
        case "policy/v1beta1::PodSecurityPolicy": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicy" }
                : { group, version, kind: "PodSecurityPolicy" };
            pulumiType = "kubernetes:policy/v1beta1:PodSecurityPolicy";
            filter = <any>k8s.policy.v1beta1.PodSecurityPolicy.isInstance;
            break;
        }
        case "policy/v1beta1::PodSecurityPolicyList": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicyList" }
                : { group, version, kind: "PodSecurityPolicyList" };
            pulumiType = "kubernetes:policy/v1beta1:PodSecurityPolicyList";
            filter = <any>k8s.policy.v1beta1.PodSecurityPolicyList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole";
            filter = <any>k8s.rbac.v1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleList";
            filter = <any>k8s.rbac.v1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:Role";
            filter = <any>k8s.rbac.v1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding";
            filter = <any>k8s.rbac.v1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleBindingList";
            filter = <any>k8s.rbac.v1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleList";
            filter = <any>k8s.rbac.v1.RoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole";
            filter = <any>k8s.rbac.v1alpha1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleList";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:Role";
            filter = <any>k8s.rbac.v1alpha1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding";
            filter = <any>k8s.rbac.v1alpha1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBindingList";
            filter = <any>k8s.rbac.v1alpha1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleList";
            filter = <any>k8s.rbac.v1alpha1.RoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole";
            filter = <any>k8s.rbac.v1beta1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleList";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:Role";
            filter = <any>k8s.rbac.v1beta1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding";
            filter = <any>k8s.rbac.v1beta1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingList";
            filter = <any>k8s.rbac.v1beta1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleList";
            filter = <any>k8s.rbac.v1beta1.RoleList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1:PriorityClass";
            filter = <any>k8s.scheduling.v1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1:PriorityClassList";
            filter = <any>k8s.scheduling.v1.PriorityClassList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1alpha1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1alpha1:PriorityClass";
            filter = <any>k8s.scheduling.v1alpha1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1alpha1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1alpha1:PriorityClassList";
            filter = <any>k8s.scheduling.v1alpha1.PriorityClassList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1beta1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1beta1:PriorityClass";
            filter = <any>k8s.scheduling.v1beta1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1beta1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1beta1:PriorityClassList";
            filter = <any>k8s.scheduling.v1beta1.PriorityClassList.isInstance;
            break;
        }
        case "settings.k8s.io/v1alpha1::PodPreset": {
            const [group, version] = "settings.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodPreset" }
                : { group, version, kind: "PodPreset" };
            pulumiType = "kubernetes:settings.k8s.io/v1alpha1:PodPreset";
            filter = <any>k8s.settings.v1alpha1.PodPreset.isInstance;
            break;
        }
        case "settings.k8s.io/v1alpha1::PodPresetList": {
            const [group, version] = "settings.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodPresetList" }
                : { group, version, kind: "PodPresetList" };
            pulumiType = "kubernetes:settings.k8s.io/v1alpha1:PodPresetList";
            filter = <any>k8s.settings.v1alpha1.PodPresetList.isInstance;
            break;
        }
        case "storage.k8s.io/v1::StorageClass": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClass" }
                : { group, version, kind: "StorageClass" };
            pulumiType = "kubernetes:storage.k8s.io/v1:StorageClass";
            filter = <any>k8s.storage.v1.StorageClass.isInstance;
            break;
        }
        case "storage.k8s.io/v1::StorageClassList": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClassList" }
                : { group, version, kind: "StorageClassList" };
            pulumiType = "kubernetes:storage.k8s.io/v1:StorageClassList";
            filter = <any>k8s.storage.v1.StorageClassList.isInstance;
            break;
        }
        case "storage.k8s.io/v1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1:VolumeAttachment";
            filter = <any>k8s.storage.v1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1.VolumeAttachmentList.isInstance;
            break;
        }
        case "storage.k8s.io/v1alpha1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1alpha1:VolumeAttachment";
            filter = <any>k8s.storage.v1alpha1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1alpha1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1alpha1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1alpha1.VolumeAttachmentList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSIDriver": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSIDriver" }
                : { group, version, kind: "CSIDriver" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSIDriver";
            filter = <any>k8s.storage.v1beta1.CSIDriver.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSIDriverList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSIDriverList" }
                : { group, version, kind: "CSIDriverList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSIDriverList";
            filter = <any>k8s.storage.v1beta1.CSIDriverList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSINode": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSINode" }
                : { group, version, kind: "CSINode" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSINode";
            filter = <any>k8s.storage.v1beta1.CSINode.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSINodeList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSINodeList" }
                : { group, version, kind: "CSINodeList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSINodeList";
            filter = <any>k8s.storage.v1beta1.CSINodeList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::StorageClass": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClass" }
                : { group, version, kind: "StorageClass" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:StorageClass";
            filter = <any>k8s.storage.v1beta1.StorageClass.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::StorageClassList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClassList" }
                : { group, version, kind: "StorageClassList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:StorageClassList";
            filter = <any>k8s.storage.v1beta1.StorageClassList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:VolumeAttachment";
            filter = <any>k8s.storage.v1beta1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1beta1.VolumeAttachmentList.isInstance;
            break;
        }
        default:
            throw new Error(`Can't list unsupported type '${apiVersion}::${kind}'`);
    }

    const invokeIterator = {
        [Symbol.asyncIterator]: function(): AsyncIterator<any> {
            // Don't depend on TypeScript's `Iterator`, as users have to opt into it.
            let inv: any;
            return {
                async next() {
                    if (inv === undefined) {
                        inv = (await pulumi.runtime
                            .invoke("kubernetes:kubernetes:list", {
                                group: "apps",
                                version: "v1",
                                kind: "Deployment",
                            })
                            .then<any[]>(({ items }) => {
                                return items;
                            }))[Symbol.iterator]();
                    }
                    return inv.next();
                },
            };
        },
    };

    return query
        .from(() => invokeIterator)
        .map<ResolvedResource<U>>(({ type: typ, ...outputs }) => {
            return { ...outputs, __pulumiType: pulumiType };
        })
        .ofType(filter);
}

//
// Implementation of `watch`.
//

export type WatchTypes = "ADDED" | "MODIFIED" | "DELETED" | "ERROR";
export type WatchEvent<T> = { object: T; type: WatchTypes };

export function watch(apiVersion: "admissionregistration.k8s.io/v1", kind: "MutatingWebhookConfiguration"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1.MutatingWebhookConfiguration>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1", kind: "MutatingWebhookConfigurationList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1.MutatingWebhookConfigurationList>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1", kind: "ValidatingWebhookConfiguration"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1.ValidatingWebhookConfiguration>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1", kind: "ValidatingWebhookConfigurationList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1.ValidatingWebhookConfigurationList>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "MutatingWebhookConfiguration"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1beta1.MutatingWebhookConfiguration>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "MutatingWebhookConfigurationList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1beta1.MutatingWebhookConfigurationList>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "ValidatingWebhookConfiguration"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1beta1.ValidatingWebhookConfiguration>>>;
export function watch(apiVersion: "admissionregistration.k8s.io/v1beta1", kind: "ValidatingWebhookConfigurationList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.admissionregistration.v1beta1.ValidatingWebhookConfigurationList>>>;
export function watch(apiVersion: "apiextensions.k8s.io/v1", kind: "CustomResourceDefinition"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiextensions.v1.CustomResourceDefinition>>>;
export function watch(apiVersion: "apiextensions.k8s.io/v1", kind: "CustomResourceDefinitionList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiextensions.v1.CustomResourceDefinitionList>>>;
export function watch(apiVersion: "apiextensions.k8s.io/v1beta1", kind: "CustomResourceDefinition"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiextensions.v1beta1.CustomResourceDefinition>>>;
export function watch(apiVersion: "apiextensions.k8s.io/v1beta1", kind: "CustomResourceDefinitionList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiextensions.v1beta1.CustomResourceDefinitionList>>>;
export function watch(apiVersion: "apiregistration.k8s.io/v1", kind: "APIService"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiregistration.v1.APIService>>>;
export function watch(apiVersion: "apiregistration.k8s.io/v1", kind: "APIServiceList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiregistration.v1.APIServiceList>>>;
export function watch(apiVersion: "apiregistration.k8s.io/v1beta1", kind: "APIService"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiregistration.v1beta1.APIService>>>;
export function watch(apiVersion: "apiregistration.k8s.io/v1beta1", kind: "APIServiceList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apiregistration.v1beta1.APIServiceList>>>;
export function watch(apiVersion: "apps/v1", kind: "ControllerRevision"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.ControllerRevision>>>;
export function watch(apiVersion: "apps/v1", kind: "ControllerRevisionList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.ControllerRevisionList>>>;
export function watch(apiVersion: "apps/v1", kind: "DaemonSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.DaemonSet>>>;
export function watch(apiVersion: "apps/v1", kind: "DaemonSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.DaemonSetList>>>;
export function watch(apiVersion: "apps/v1", kind: "Deployment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.Deployment>>>;
export function watch(apiVersion: "apps/v1", kind: "DeploymentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.DeploymentList>>>;
export function watch(apiVersion: "apps/v1", kind: "ReplicaSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.ReplicaSet>>>;
export function watch(apiVersion: "apps/v1", kind: "ReplicaSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.ReplicaSetList>>>;
export function watch(apiVersion: "apps/v1", kind: "StatefulSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.StatefulSet>>>;
export function watch(apiVersion: "apps/v1", kind: "StatefulSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1.StatefulSetList>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "ControllerRevision"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.ControllerRevision>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "ControllerRevisionList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.ControllerRevisionList>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "Deployment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.Deployment>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "DeploymentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.DeploymentList>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "StatefulSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.StatefulSet>>>;
export function watch(apiVersion: "apps/v1beta1", kind: "StatefulSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta1.StatefulSetList>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "ControllerRevision"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.ControllerRevision>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "ControllerRevisionList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.ControllerRevisionList>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "DaemonSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.DaemonSet>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "DaemonSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.DaemonSetList>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "Deployment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.Deployment>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "DeploymentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.DeploymentList>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "ReplicaSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.ReplicaSet>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "ReplicaSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.ReplicaSetList>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "StatefulSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.StatefulSet>>>;
export function watch(apiVersion: "apps/v1beta2", kind: "StatefulSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.apps.v1beta2.StatefulSetList>>>;
export function watch(apiVersion: "auditregistration.k8s.io/v1alpha1", kind: "AuditSink"): AsyncIterable<WatchEvent<ResolvedResource<k8s.auditregistration.v1alpha1.AuditSink>>>;
export function watch(apiVersion: "auditregistration.k8s.io/v1alpha1", kind: "AuditSinkList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.auditregistration.v1alpha1.AuditSinkList>>>;
export function watch(apiVersion: "authentication.k8s.io/v1", kind: "TokenRequest"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authentication.v1.TokenRequest>>>;
export function watch(apiVersion: "authentication.k8s.io/v1", kind: "TokenReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authentication.v1.TokenReview>>>;
export function watch(apiVersion: "authentication.k8s.io/v1beta1", kind: "TokenReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authentication.v1beta1.TokenReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1", kind: "LocalSubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1.LocalSubjectAccessReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1", kind: "SelfSubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1.SelfSubjectAccessReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1", kind: "SelfSubjectRulesReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1.SelfSubjectRulesReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1", kind: "SubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1.SubjectAccessReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1beta1", kind: "LocalSubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1beta1.LocalSubjectAccessReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1beta1", kind: "SelfSubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1beta1.SelfSubjectAccessReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1beta1", kind: "SelfSubjectRulesReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1beta1.SelfSubjectRulesReview>>>;
export function watch(apiVersion: "authorization.k8s.io/v1beta1", kind: "SubjectAccessReview"): AsyncIterable<WatchEvent<ResolvedResource<k8s.authorization.v1beta1.SubjectAccessReview>>>;
export function watch(apiVersion: "autoscaling/v1", kind: "HorizontalPodAutoscaler"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v1.HorizontalPodAutoscaler>>>;
export function watch(apiVersion: "autoscaling/v1", kind: "HorizontalPodAutoscalerList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v1.HorizontalPodAutoscalerList>>>;
export function watch(apiVersion: "autoscaling/v2beta1", kind: "HorizontalPodAutoscaler"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v2beta1.HorizontalPodAutoscaler>>>;
export function watch(apiVersion: "autoscaling/v2beta1", kind: "HorizontalPodAutoscalerList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v2beta1.HorizontalPodAutoscalerList>>>;
export function watch(apiVersion: "autoscaling/v2beta2", kind: "HorizontalPodAutoscaler"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v2beta2.HorizontalPodAutoscaler>>>;
export function watch(apiVersion: "autoscaling/v2beta2", kind: "HorizontalPodAutoscalerList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.autoscaling.v2beta2.HorizontalPodAutoscalerList>>>;
export function watch(apiVersion: "batch/v1", kind: "Job"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v1.Job>>>;
export function watch(apiVersion: "batch/v1", kind: "JobList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v1.JobList>>>;
export function watch(apiVersion: "batch/v1beta1", kind: "CronJob"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v1beta1.CronJob>>>;
export function watch(apiVersion: "batch/v1beta1", kind: "CronJobList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v1beta1.CronJobList>>>;
export function watch(apiVersion: "batch/v2alpha1", kind: "CronJob"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v2alpha1.CronJob>>>;
export function watch(apiVersion: "batch/v2alpha1", kind: "CronJobList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.batch.v2alpha1.CronJobList>>>;
export function watch(apiVersion: "certificates.k8s.io/v1beta1", kind: "CertificateSigningRequest"): AsyncIterable<WatchEvent<ResolvedResource<k8s.certificates.v1beta1.CertificateSigningRequest>>>;
export function watch(apiVersion: "certificates.k8s.io/v1beta1", kind: "CertificateSigningRequestList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.certificates.v1beta1.CertificateSigningRequestList>>>;
export function watch(apiVersion: "coordination.k8s.io/v1", kind: "Lease"): AsyncIterable<WatchEvent<ResolvedResource<k8s.coordination.v1.Lease>>>;
export function watch(apiVersion: "coordination.k8s.io/v1", kind: "LeaseList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.coordination.v1.LeaseList>>>;
export function watch(apiVersion: "coordination.k8s.io/v1beta1", kind: "Lease"): AsyncIterable<WatchEvent<ResolvedResource<k8s.coordination.v1beta1.Lease>>>;
export function watch(apiVersion: "coordination.k8s.io/v1beta1", kind: "LeaseList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.coordination.v1beta1.LeaseList>>>;
export function watch(apiVersion: "v1", kind: "Binding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Binding>>>;
export function watch(apiVersion: "v1", kind: "ComponentStatus"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ComponentStatus>>>;
export function watch(apiVersion: "v1", kind: "ComponentStatusList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ComponentStatusList>>>;
export function watch(apiVersion: "v1", kind: "ConfigMap"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ConfigMap>>>;
export function watch(apiVersion: "v1", kind: "ConfigMapList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ConfigMapList>>>;
export function watch(apiVersion: "v1", kind: "Endpoints"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Endpoints>>>;
export function watch(apiVersion: "v1", kind: "EndpointsList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.EndpointsList>>>;
export function watch(apiVersion: "v1", kind: "Event"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Event>>>;
export function watch(apiVersion: "v1", kind: "EventList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.EventList>>>;
export function watch(apiVersion: "v1", kind: "LimitRange"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.LimitRange>>>;
export function watch(apiVersion: "v1", kind: "LimitRangeList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.LimitRangeList>>>;
export function watch(apiVersion: "v1", kind: "Namespace"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Namespace>>>;
export function watch(apiVersion: "v1", kind: "NamespaceList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.NamespaceList>>>;
export function watch(apiVersion: "v1", kind: "Node"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Node>>>;
export function watch(apiVersion: "v1", kind: "NodeList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.NodeList>>>;
export function watch(apiVersion: "v1", kind: "PersistentVolume"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PersistentVolume>>>;
export function watch(apiVersion: "v1", kind: "PersistentVolumeClaim"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PersistentVolumeClaim>>>;
export function watch(apiVersion: "v1", kind: "PersistentVolumeClaimList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PersistentVolumeClaimList>>>;
export function watch(apiVersion: "v1", kind: "PersistentVolumeList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PersistentVolumeList>>>;
export function watch(apiVersion: "v1", kind: "Pod"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Pod>>>;
export function watch(apiVersion: "v1", kind: "PodList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PodList>>>;
export function watch(apiVersion: "v1", kind: "PodTemplate"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PodTemplate>>>;
export function watch(apiVersion: "v1", kind: "PodTemplateList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.PodTemplateList>>>;
export function watch(apiVersion: "v1", kind: "ReplicationController"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ReplicationController>>>;
export function watch(apiVersion: "v1", kind: "ReplicationControllerList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ReplicationControllerList>>>;
export function watch(apiVersion: "v1", kind: "ResourceQuota"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ResourceQuota>>>;
export function watch(apiVersion: "v1", kind: "ResourceQuotaList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ResourceQuotaList>>>;
export function watch(apiVersion: "v1", kind: "Secret"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Secret>>>;
export function watch(apiVersion: "v1", kind: "SecretList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.SecretList>>>;
export function watch(apiVersion: "v1", kind: "Service"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.Service>>>;
export function watch(apiVersion: "v1", kind: "ServiceAccount"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ServiceAccount>>>;
export function watch(apiVersion: "v1", kind: "ServiceAccountList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ServiceAccountList>>>;
export function watch(apiVersion: "v1", kind: "ServiceList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.core.v1.ServiceList>>>;
export function watch(apiVersion: "discovery.k8s.io/v1alpha1", kind: "EndpointSlice"): AsyncIterable<WatchEvent<ResolvedResource<k8s.discovery.v1alpha1.EndpointSlice>>>;
export function watch(apiVersion: "discovery.k8s.io/v1alpha1", kind: "EndpointSliceList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.discovery.v1alpha1.EndpointSliceList>>>;
export function watch(apiVersion: "events.k8s.io/v1beta1", kind: "Event"): AsyncIterable<WatchEvent<ResolvedResource<k8s.events.v1beta1.Event>>>;
export function watch(apiVersion: "events.k8s.io/v1beta1", kind: "EventList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.events.v1beta1.EventList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "DaemonSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.DaemonSet>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "DaemonSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.DaemonSetList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "Deployment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.Deployment>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "DeploymentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.DeploymentList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "Ingress"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.Ingress>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "IngressList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.IngressList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "NetworkPolicy"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.NetworkPolicy>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "NetworkPolicyList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.NetworkPolicyList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "PodSecurityPolicy"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.PodSecurityPolicy>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "PodSecurityPolicyList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.PodSecurityPolicyList>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "ReplicaSet"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.ReplicaSet>>>;
export function watch(apiVersion: "extensions/v1beta1", kind: "ReplicaSetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.extensions.v1beta1.ReplicaSetList>>>;
export function watch(apiVersion: "v1", kind: "Status"): AsyncIterable<WatchEvent<ResolvedResource<k8s.meta.v1.Status>>>;
export function watch(apiVersion: "networking.k8s.io/v1", kind: "NetworkPolicy"): AsyncIterable<WatchEvent<ResolvedResource<k8s.networking.v1.NetworkPolicy>>>;
export function watch(apiVersion: "networking.k8s.io/v1", kind: "NetworkPolicyList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.networking.v1.NetworkPolicyList>>>;
export function watch(apiVersion: "networking.k8s.io/v1beta1", kind: "Ingress"): AsyncIterable<WatchEvent<ResolvedResource<k8s.networking.v1beta1.Ingress>>>;
export function watch(apiVersion: "networking.k8s.io/v1beta1", kind: "IngressList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.networking.v1beta1.IngressList>>>;
export function watch(apiVersion: "node.k8s.io/v1alpha1", kind: "RuntimeClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.node.v1alpha1.RuntimeClass>>>;
export function watch(apiVersion: "node.k8s.io/v1alpha1", kind: "RuntimeClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.node.v1alpha1.RuntimeClassList>>>;
export function watch(apiVersion: "node.k8s.io/v1beta1", kind: "RuntimeClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.node.v1beta1.RuntimeClass>>>;
export function watch(apiVersion: "node.k8s.io/v1beta1", kind: "RuntimeClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.node.v1beta1.RuntimeClassList>>>;
export function watch(apiVersion: "policy/v1beta1", kind: "PodDisruptionBudget"): AsyncIterable<WatchEvent<ResolvedResource<k8s.policy.v1beta1.PodDisruptionBudget>>>;
export function watch(apiVersion: "policy/v1beta1", kind: "PodDisruptionBudgetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.policy.v1beta1.PodDisruptionBudgetList>>>;
export function watch(apiVersion: "policy/v1beta1", kind: "PodSecurityPolicy"): AsyncIterable<WatchEvent<ResolvedResource<k8s.policy.v1beta1.PodSecurityPolicy>>>;
export function watch(apiVersion: "policy/v1beta1", kind: "PodSecurityPolicyList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.policy.v1beta1.PodSecurityPolicyList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRole"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.ClusterRole>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.ClusterRoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.ClusterRoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.ClusterRoleList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "Role"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.Role>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.RoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.RoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1", kind: "RoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1.RoleList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRole"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.ClusterRole>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "ClusterRoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.ClusterRoleList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "Role"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.Role>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.RoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.RoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1alpha1", kind: "RoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1alpha1.RoleList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRole"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.ClusterRole>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "ClusterRoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.ClusterRoleList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "Role"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.Role>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleBinding"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.RoleBinding>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleBindingList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.RoleBindingList>>>;
export function watch(apiVersion: "rbac.authorization.k8s.io/v1beta1", kind: "RoleList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.rbac.v1beta1.RoleList>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1", kind: "PriorityClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1.PriorityClass>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1", kind: "PriorityClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1.PriorityClassList>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1alpha1", kind: "PriorityClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1alpha1.PriorityClass>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1alpha1", kind: "PriorityClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1alpha1.PriorityClassList>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1beta1", kind: "PriorityClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1beta1.PriorityClass>>>;
export function watch(apiVersion: "scheduling.k8s.io/v1beta1", kind: "PriorityClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.scheduling.v1beta1.PriorityClassList>>>;
export function watch(apiVersion: "settings.k8s.io/v1alpha1", kind: "PodPreset"): AsyncIterable<WatchEvent<ResolvedResource<k8s.settings.v1alpha1.PodPreset>>>;
export function watch(apiVersion: "settings.k8s.io/v1alpha1", kind: "PodPresetList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.settings.v1alpha1.PodPresetList>>>;
export function watch(apiVersion: "storage.k8s.io/v1", kind: "StorageClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1.StorageClass>>>;
export function watch(apiVersion: "storage.k8s.io/v1", kind: "StorageClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1.StorageClassList>>>;
export function watch(apiVersion: "storage.k8s.io/v1", kind: "VolumeAttachment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1.VolumeAttachment>>>;
export function watch(apiVersion: "storage.k8s.io/v1", kind: "VolumeAttachmentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1.VolumeAttachmentList>>>;
export function watch(apiVersion: "storage.k8s.io/v1alpha1", kind: "VolumeAttachment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1alpha1.VolumeAttachment>>>;
export function watch(apiVersion: "storage.k8s.io/v1alpha1", kind: "VolumeAttachmentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1alpha1.VolumeAttachmentList>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "CSIDriver"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.CSIDriver>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "CSIDriverList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.CSIDriverList>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "CSINode"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.CSINode>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "CSINodeList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.CSINodeList>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "StorageClass"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.StorageClass>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "StorageClassList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.StorageClassList>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "VolumeAttachment"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.VolumeAttachment>>>;
export function watch(apiVersion: "storage.k8s.io/v1beta1", kind: "VolumeAttachmentList"): AsyncIterable<WatchEvent<ResolvedResource<k8s.storage.v1beta1.VolumeAttachmentList>>>;
export async function* watch<U extends Resource>(apiVersion: string, kind: string) {

    let gvk: { group: string; version: string; kind: string };
    let pulumiType: string;
    let filter: (obj: any) => obj is ResolvedResource<U>;
    switch (`${apiVersion}::${kind}`) {
        case "admissionregistration.k8s.io/v1::MutatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfiguration" }
                : { group, version, kind: "MutatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1.MutatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::MutatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfigurationList" }
                : { group, version, kind: "MutatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1.MutatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::ValidatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfiguration" }
                : { group, version, kind: "ValidatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1.ValidatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1::ValidatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfigurationList" }
                : { group, version, kind: "ValidatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1.ValidatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::MutatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfiguration" }
                : { group, version, kind: "MutatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1beta1.MutatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::MutatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "MutatingWebhookConfigurationList" }
                : { group, version, kind: "MutatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1beta1.MutatingWebhookConfigurationList.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::ValidatingWebhookConfiguration": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfiguration" }
                : { group, version, kind: "ValidatingWebhookConfiguration" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfiguration";
            filter = <any>k8s.admissionregistration.v1beta1.ValidatingWebhookConfiguration.isInstance;
            break;
        }
        case "admissionregistration.k8s.io/v1beta1::ValidatingWebhookConfigurationList": {
            const [group, version] = "admissionregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ValidatingWebhookConfigurationList" }
                : { group, version, kind: "ValidatingWebhookConfigurationList" };
            pulumiType = "kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfigurationList";
            filter = <any>k8s.admissionregistration.v1beta1.ValidatingWebhookConfigurationList.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1::CustomResourceDefinition": {
            const [group, version] = "apiextensions.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinition" }
                : { group, version, kind: "CustomResourceDefinition" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition";
            filter = <any>k8s.apiextensions.v1.CustomResourceDefinition.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1::CustomResourceDefinitionList": {
            const [group, version] = "apiextensions.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinitionList" }
                : { group, version, kind: "CustomResourceDefinitionList" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinitionList";
            filter = <any>k8s.apiextensions.v1.CustomResourceDefinitionList.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1beta1::CustomResourceDefinition": {
            const [group, version] = "apiextensions.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinition" }
                : { group, version, kind: "CustomResourceDefinition" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinition";
            filter = <any>k8s.apiextensions.v1beta1.CustomResourceDefinition.isInstance;
            break;
        }
        case "apiextensions.k8s.io/v1beta1::CustomResourceDefinitionList": {
            const [group, version] = "apiextensions.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CustomResourceDefinitionList" }
                : { group, version, kind: "CustomResourceDefinitionList" };
            pulumiType = "kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinitionList";
            filter = <any>k8s.apiextensions.v1beta1.CustomResourceDefinitionList.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1::APIService": {
            const [group, version] = "apiregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIService" }
                : { group, version, kind: "APIService" };
            pulumiType = "kubernetes:apiregistration/v1:APIService";
            filter = <any>k8s.apiregistration.v1.APIService.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1::APIServiceList": {
            const [group, version] = "apiregistration.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIServiceList" }
                : { group, version, kind: "APIServiceList" };
            pulumiType = "kubernetes:apiregistration/v1:APIServiceList";
            filter = <any>k8s.apiregistration.v1.APIServiceList.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1beta1::APIService": {
            const [group, version] = "apiregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIService" }
                : { group, version, kind: "APIService" };
            pulumiType = "kubernetes:apiregistration/v1beta1:APIService";
            filter = <any>k8s.apiregistration.v1beta1.APIService.isInstance;
            break;
        }
        case "apiregistration.k8s.io/v1beta1::APIServiceList": {
            const [group, version] = "apiregistration.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "APIServiceList" }
                : { group, version, kind: "APIServiceList" };
            pulumiType = "kubernetes:apiregistration/v1beta1:APIServiceList";
            filter = <any>k8s.apiregistration.v1beta1.APIServiceList.isInstance;
            break;
        }
        case "apps/v1::ControllerRevision": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1:ControllerRevision";
            filter = <any>k8s.apps.v1.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1::ControllerRevisionList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1:ControllerRevisionList";
            filter = <any>k8s.apps.v1.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1::DaemonSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:apps/v1:DaemonSet";
            filter = <any>k8s.apps.v1.DaemonSet.isInstance;
            break;
        }
        case "apps/v1::DaemonSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:apps/v1:DaemonSetList";
            filter = <any>k8s.apps.v1.DaemonSetList.isInstance;
            break;
        }
        case "apps/v1::Deployment": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1:Deployment";
            filter = <any>k8s.apps.v1.Deployment.isInstance;
            break;
        }
        case "apps/v1::DeploymentList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1:DeploymentList";
            filter = <any>k8s.apps.v1.DeploymentList.isInstance;
            break;
        }
        case "apps/v1::ReplicaSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:apps/v1:ReplicaSet";
            filter = <any>k8s.apps.v1.ReplicaSet.isInstance;
            break;
        }
        case "apps/v1::ReplicaSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:apps/v1:ReplicaSetList";
            filter = <any>k8s.apps.v1.ReplicaSetList.isInstance;
            break;
        }
        case "apps/v1::StatefulSet": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1:StatefulSet";
            filter = <any>k8s.apps.v1.StatefulSet.isInstance;
            break;
        }
        case "apps/v1::StatefulSetList": {
            const [group, version] = "apps/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1:StatefulSetList";
            filter = <any>k8s.apps.v1.StatefulSetList.isInstance;
            break;
        }
        case "apps/v1beta1::ControllerRevision": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1beta1:ControllerRevision";
            filter = <any>k8s.apps.v1beta1.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1beta1::ControllerRevisionList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1beta1:ControllerRevisionList";
            filter = <any>k8s.apps.v1beta1.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1beta1::Deployment": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1beta1:Deployment";
            filter = <any>k8s.apps.v1beta1.Deployment.isInstance;
            break;
        }
        case "apps/v1beta1::DeploymentList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1beta1:DeploymentList";
            filter = <any>k8s.apps.v1beta1.DeploymentList.isInstance;
            break;
        }
        case "apps/v1beta1::StatefulSet": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1beta1:StatefulSet";
            filter = <any>k8s.apps.v1beta1.StatefulSet.isInstance;
            break;
        }
        case "apps/v1beta1::StatefulSetList": {
            const [group, version] = "apps/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1beta1:StatefulSetList";
            filter = <any>k8s.apps.v1beta1.StatefulSetList.isInstance;
            break;
        }
        case "apps/v1beta2::ControllerRevision": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevision" }
                : { group, version, kind: "ControllerRevision" };
            pulumiType = "kubernetes:apps/v1beta2:ControllerRevision";
            filter = <any>k8s.apps.v1beta2.ControllerRevision.isInstance;
            break;
        }
        case "apps/v1beta2::ControllerRevisionList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ControllerRevisionList" }
                : { group, version, kind: "ControllerRevisionList" };
            pulumiType = "kubernetes:apps/v1beta2:ControllerRevisionList";
            filter = <any>k8s.apps.v1beta2.ControllerRevisionList.isInstance;
            break;
        }
        case "apps/v1beta2::DaemonSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:apps/v1beta2:DaemonSet";
            filter = <any>k8s.apps.v1beta2.DaemonSet.isInstance;
            break;
        }
        case "apps/v1beta2::DaemonSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:apps/v1beta2:DaemonSetList";
            filter = <any>k8s.apps.v1beta2.DaemonSetList.isInstance;
            break;
        }
        case "apps/v1beta2::Deployment": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:apps/v1beta2:Deployment";
            filter = <any>k8s.apps.v1beta2.Deployment.isInstance;
            break;
        }
        case "apps/v1beta2::DeploymentList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:apps/v1beta2:DeploymentList";
            filter = <any>k8s.apps.v1beta2.DeploymentList.isInstance;
            break;
        }
        case "apps/v1beta2::ReplicaSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:apps/v1beta2:ReplicaSet";
            filter = <any>k8s.apps.v1beta2.ReplicaSet.isInstance;
            break;
        }
        case "apps/v1beta2::ReplicaSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:apps/v1beta2:ReplicaSetList";
            filter = <any>k8s.apps.v1beta2.ReplicaSetList.isInstance;
            break;
        }
        case "apps/v1beta2::StatefulSet": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSet" }
                : { group, version, kind: "StatefulSet" };
            pulumiType = "kubernetes:apps/v1beta2:StatefulSet";
            filter = <any>k8s.apps.v1beta2.StatefulSet.isInstance;
            break;
        }
        case "apps/v1beta2::StatefulSetList": {
            const [group, version] = "apps/v1beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StatefulSetList" }
                : { group, version, kind: "StatefulSetList" };
            pulumiType = "kubernetes:apps/v1beta2:StatefulSetList";
            filter = <any>k8s.apps.v1beta2.StatefulSetList.isInstance;
            break;
        }
        case "auditregistration.k8s.io/v1alpha1::AuditSink": {
            const [group, version] = "auditregistration.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "AuditSink" }
                : { group, version, kind: "AuditSink" };
            pulumiType = "kubernetes:auditregistration.k8s.io/v1alpha1:AuditSink";
            filter = <any>k8s.auditregistration.v1alpha1.AuditSink.isInstance;
            break;
        }
        case "auditregistration.k8s.io/v1alpha1::AuditSinkList": {
            const [group, version] = "auditregistration.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "AuditSinkList" }
                : { group, version, kind: "AuditSinkList" };
            pulumiType = "kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkList";
            filter = <any>k8s.auditregistration.v1alpha1.AuditSinkList.isInstance;
            break;
        }
        case "authentication.k8s.io/v1::TokenRequest": {
            const [group, version] = "authentication.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenRequest" }
                : { group, version, kind: "TokenRequest" };
            pulumiType = "kubernetes:authentication.k8s.io/v1:TokenRequest";
            filter = <any>k8s.authentication.v1.TokenRequest.isInstance;
            break;
        }
        case "authentication.k8s.io/v1::TokenReview": {
            const [group, version] = "authentication.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenReview" }
                : { group, version, kind: "TokenReview" };
            pulumiType = "kubernetes:authentication.k8s.io/v1:TokenReview";
            filter = <any>k8s.authentication.v1.TokenReview.isInstance;
            break;
        }
        case "authentication.k8s.io/v1beta1::TokenReview": {
            const [group, version] = "authentication.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "TokenReview" }
                : { group, version, kind: "TokenReview" };
            pulumiType = "kubernetes:authentication.k8s.io/v1beta1:TokenReview";
            filter = <any>k8s.authentication.v1beta1.TokenReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::LocalSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LocalSubjectAccessReview" }
                : { group, version, kind: "LocalSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:LocalSubjectAccessReview";
            filter = <any>k8s.authorization.v1.LocalSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SelfSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectAccessReview" }
                : { group, version, kind: "SelfSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SelfSubjectAccessReview";
            filter = <any>k8s.authorization.v1.SelfSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SelfSubjectRulesReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectRulesReview" }
                : { group, version, kind: "SelfSubjectRulesReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SelfSubjectRulesReview";
            filter = <any>k8s.authorization.v1.SelfSubjectRulesReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1::SubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SubjectAccessReview" }
                : { group, version, kind: "SubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1:SubjectAccessReview";
            filter = <any>k8s.authorization.v1.SubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::LocalSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LocalSubjectAccessReview" }
                : { group, version, kind: "LocalSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:LocalSubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.LocalSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SelfSubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectAccessReview" }
                : { group, version, kind: "SelfSubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SelfSubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.SelfSubjectAccessReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SelfSubjectRulesReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SelfSubjectRulesReview" }
                : { group, version, kind: "SelfSubjectRulesReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SelfSubjectRulesReview";
            filter = <any>k8s.authorization.v1beta1.SelfSubjectRulesReview.isInstance;
            break;
        }
        case "authorization.k8s.io/v1beta1::SubjectAccessReview": {
            const [group, version] = "authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SubjectAccessReview" }
                : { group, version, kind: "SubjectAccessReview" };
            pulumiType = "kubernetes:authorization.k8s.io/v1beta1:SubjectAccessReview";
            filter = <any>k8s.authorization.v1beta1.SubjectAccessReview.isInstance;
            break;
        }
        case "autoscaling/v1::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v1:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v1.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v1::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v1:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v1.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "autoscaling/v2beta1::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v2beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v2beta1.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v2beta1::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v2beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v2beta1.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "autoscaling/v2beta2::HorizontalPodAutoscaler": {
            const [group, version] = "autoscaling/v2beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscaler" }
                : { group, version, kind: "HorizontalPodAutoscaler" };
            pulumiType = "kubernetes:autoscaling/v2beta2:HorizontalPodAutoscaler";
            filter = <any>k8s.autoscaling.v2beta2.HorizontalPodAutoscaler.isInstance;
            break;
        }
        case "autoscaling/v2beta2::HorizontalPodAutoscalerList": {
            const [group, version] = "autoscaling/v2beta2".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "HorizontalPodAutoscalerList" }
                : { group, version, kind: "HorizontalPodAutoscalerList" };
            pulumiType = "kubernetes:autoscaling/v2beta2:HorizontalPodAutoscalerList";
            filter = <any>k8s.autoscaling.v2beta2.HorizontalPodAutoscalerList.isInstance;
            break;
        }
        case "batch/v1::Job": {
            const [group, version] = "batch/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Job" }
                : { group, version, kind: "Job" };
            pulumiType = "kubernetes:batch/v1:Job";
            filter = <any>k8s.batch.v1.Job.isInstance;
            break;
        }
        case "batch/v1::JobList": {
            const [group, version] = "batch/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "JobList" }
                : { group, version, kind: "JobList" };
            pulumiType = "kubernetes:batch/v1:JobList";
            filter = <any>k8s.batch.v1.JobList.isInstance;
            break;
        }
        case "batch/v1beta1::CronJob": {
            const [group, version] = "batch/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJob" }
                : { group, version, kind: "CronJob" };
            pulumiType = "kubernetes:batch/v1beta1:CronJob";
            filter = <any>k8s.batch.v1beta1.CronJob.isInstance;
            break;
        }
        case "batch/v1beta1::CronJobList": {
            const [group, version] = "batch/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJobList" }
                : { group, version, kind: "CronJobList" };
            pulumiType = "kubernetes:batch/v1beta1:CronJobList";
            filter = <any>k8s.batch.v1beta1.CronJobList.isInstance;
            break;
        }
        case "batch/v2alpha1::CronJob": {
            const [group, version] = "batch/v2alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJob" }
                : { group, version, kind: "CronJob" };
            pulumiType = "kubernetes:batch/v2alpha1:CronJob";
            filter = <any>k8s.batch.v2alpha1.CronJob.isInstance;
            break;
        }
        case "batch/v2alpha1::CronJobList": {
            const [group, version] = "batch/v2alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CronJobList" }
                : { group, version, kind: "CronJobList" };
            pulumiType = "kubernetes:batch/v2alpha1:CronJobList";
            filter = <any>k8s.batch.v2alpha1.CronJobList.isInstance;
            break;
        }
        case "certificates.k8s.io/v1beta1::CertificateSigningRequest": {
            const [group, version] = "certificates.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CertificateSigningRequest" }
                : { group, version, kind: "CertificateSigningRequest" };
            pulumiType = "kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequest";
            filter = <any>k8s.certificates.v1beta1.CertificateSigningRequest.isInstance;
            break;
        }
        case "certificates.k8s.io/v1beta1::CertificateSigningRequestList": {
            const [group, version] = "certificates.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CertificateSigningRequestList" }
                : { group, version, kind: "CertificateSigningRequestList" };
            pulumiType = "kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequestList";
            filter = <any>k8s.certificates.v1beta1.CertificateSigningRequestList.isInstance;
            break;
        }
        case "coordination.k8s.io/v1::Lease": {
            const [group, version] = "coordination.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Lease" }
                : { group, version, kind: "Lease" };
            pulumiType = "kubernetes:coordination.k8s.io/v1:Lease";
            filter = <any>k8s.coordination.v1.Lease.isInstance;
            break;
        }
        case "coordination.k8s.io/v1::LeaseList": {
            const [group, version] = "coordination.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LeaseList" }
                : { group, version, kind: "LeaseList" };
            pulumiType = "kubernetes:coordination.k8s.io/v1:LeaseList";
            filter = <any>k8s.coordination.v1.LeaseList.isInstance;
            break;
        }
        case "coordination.k8s.io/v1beta1::Lease": {
            const [group, version] = "coordination.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Lease" }
                : { group, version, kind: "Lease" };
            pulumiType = "kubernetes:coordination.k8s.io/v1beta1:Lease";
            filter = <any>k8s.coordination.v1beta1.Lease.isInstance;
            break;
        }
        case "coordination.k8s.io/v1beta1::LeaseList": {
            const [group, version] = "coordination.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LeaseList" }
                : { group, version, kind: "LeaseList" };
            pulumiType = "kubernetes:coordination.k8s.io/v1beta1:LeaseList";
            filter = <any>k8s.coordination.v1beta1.LeaseList.isInstance;
            break;
        }
        case "v1::Binding": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Binding" }
                : { group, version, kind: "Binding" };
            pulumiType = "kubernetes:core/v1:Binding";
            filter = <any>k8s.core.v1.Binding.isInstance;
            break;
        }
        case "v1::ComponentStatus": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ComponentStatus" }
                : { group, version, kind: "ComponentStatus" };
            pulumiType = "kubernetes:core/v1:ComponentStatus";
            filter = <any>k8s.core.v1.ComponentStatus.isInstance;
            break;
        }
        case "v1::ComponentStatusList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ComponentStatusList" }
                : { group, version, kind: "ComponentStatusList" };
            pulumiType = "kubernetes:core/v1:ComponentStatusList";
            filter = <any>k8s.core.v1.ComponentStatusList.isInstance;
            break;
        }
        case "v1::ConfigMap": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ConfigMap" }
                : { group, version, kind: "ConfigMap" };
            pulumiType = "kubernetes:core/v1:ConfigMap";
            filter = <any>k8s.core.v1.ConfigMap.isInstance;
            break;
        }
        case "v1::ConfigMapList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ConfigMapList" }
                : { group, version, kind: "ConfigMapList" };
            pulumiType = "kubernetes:core/v1:ConfigMapList";
            filter = <any>k8s.core.v1.ConfigMapList.isInstance;
            break;
        }
        case "v1::Endpoints": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Endpoints" }
                : { group, version, kind: "Endpoints" };
            pulumiType = "kubernetes:core/v1:Endpoints";
            filter = <any>k8s.core.v1.Endpoints.isInstance;
            break;
        }
        case "v1::EndpointsList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointsList" }
                : { group, version, kind: "EndpointsList" };
            pulumiType = "kubernetes:core/v1:EndpointsList";
            filter = <any>k8s.core.v1.EndpointsList.isInstance;
            break;
        }
        case "v1::Event": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Event" }
                : { group, version, kind: "Event" };
            pulumiType = "kubernetes:core/v1:Event";
            filter = <any>k8s.core.v1.Event.isInstance;
            break;
        }
        case "v1::EventList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EventList" }
                : { group, version, kind: "EventList" };
            pulumiType = "kubernetes:core/v1:EventList";
            filter = <any>k8s.core.v1.EventList.isInstance;
            break;
        }
        case "v1::LimitRange": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LimitRange" }
                : { group, version, kind: "LimitRange" };
            pulumiType = "kubernetes:core/v1:LimitRange";
            filter = <any>k8s.core.v1.LimitRange.isInstance;
            break;
        }
        case "v1::LimitRangeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "LimitRangeList" }
                : { group, version, kind: "LimitRangeList" };
            pulumiType = "kubernetes:core/v1:LimitRangeList";
            filter = <any>k8s.core.v1.LimitRangeList.isInstance;
            break;
        }
        case "v1::Namespace": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Namespace" }
                : { group, version, kind: "Namespace" };
            pulumiType = "kubernetes:core/v1:Namespace";
            filter = <any>k8s.core.v1.Namespace.isInstance;
            break;
        }
        case "v1::NamespaceList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NamespaceList" }
                : { group, version, kind: "NamespaceList" };
            pulumiType = "kubernetes:core/v1:NamespaceList";
            filter = <any>k8s.core.v1.NamespaceList.isInstance;
            break;
        }
        case "v1::Node": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Node" }
                : { group, version, kind: "Node" };
            pulumiType = "kubernetes:core/v1:Node";
            filter = <any>k8s.core.v1.Node.isInstance;
            break;
        }
        case "v1::NodeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NodeList" }
                : { group, version, kind: "NodeList" };
            pulumiType = "kubernetes:core/v1:NodeList";
            filter = <any>k8s.core.v1.NodeList.isInstance;
            break;
        }
        case "v1::PersistentVolume": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolume" }
                : { group, version, kind: "PersistentVolume" };
            pulumiType = "kubernetes:core/v1:PersistentVolume";
            filter = <any>k8s.core.v1.PersistentVolume.isInstance;
            break;
        }
        case "v1::PersistentVolumeClaim": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeClaim" }
                : { group, version, kind: "PersistentVolumeClaim" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeClaim";
            filter = <any>k8s.core.v1.PersistentVolumeClaim.isInstance;
            break;
        }
        case "v1::PersistentVolumeClaimList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeClaimList" }
                : { group, version, kind: "PersistentVolumeClaimList" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeClaimList";
            filter = <any>k8s.core.v1.PersistentVolumeClaimList.isInstance;
            break;
        }
        case "v1::PersistentVolumeList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PersistentVolumeList" }
                : { group, version, kind: "PersistentVolumeList" };
            pulumiType = "kubernetes:core/v1:PersistentVolumeList";
            filter = <any>k8s.core.v1.PersistentVolumeList.isInstance;
            break;
        }
        case "v1::Pod": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Pod" }
                : { group, version, kind: "Pod" };
            pulumiType = "kubernetes:core/v1:Pod";
            filter = <any>k8s.core.v1.Pod.isInstance;
            break;
        }
        case "v1::PodList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodList" }
                : { group, version, kind: "PodList" };
            pulumiType = "kubernetes:core/v1:PodList";
            filter = <any>k8s.core.v1.PodList.isInstance;
            break;
        }
        case "v1::PodTemplate": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodTemplate" }
                : { group, version, kind: "PodTemplate" };
            pulumiType = "kubernetes:core/v1:PodTemplate";
            filter = <any>k8s.core.v1.PodTemplate.isInstance;
            break;
        }
        case "v1::PodTemplateList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodTemplateList" }
                : { group, version, kind: "PodTemplateList" };
            pulumiType = "kubernetes:core/v1:PodTemplateList";
            filter = <any>k8s.core.v1.PodTemplateList.isInstance;
            break;
        }
        case "v1::ReplicationController": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicationController" }
                : { group, version, kind: "ReplicationController" };
            pulumiType = "kubernetes:core/v1:ReplicationController";
            filter = <any>k8s.core.v1.ReplicationController.isInstance;
            break;
        }
        case "v1::ReplicationControllerList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicationControllerList" }
                : { group, version, kind: "ReplicationControllerList" };
            pulumiType = "kubernetes:core/v1:ReplicationControllerList";
            filter = <any>k8s.core.v1.ReplicationControllerList.isInstance;
            break;
        }
        case "v1::ResourceQuota": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ResourceQuota" }
                : { group, version, kind: "ResourceQuota" };
            pulumiType = "kubernetes:core/v1:ResourceQuota";
            filter = <any>k8s.core.v1.ResourceQuota.isInstance;
            break;
        }
        case "v1::ResourceQuotaList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ResourceQuotaList" }
                : { group, version, kind: "ResourceQuotaList" };
            pulumiType = "kubernetes:core/v1:ResourceQuotaList";
            filter = <any>k8s.core.v1.ResourceQuotaList.isInstance;
            break;
        }
        case "v1::Secret": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Secret" }
                : { group, version, kind: "Secret" };
            pulumiType = "kubernetes:core/v1:Secret";
            filter = <any>k8s.core.v1.Secret.isInstance;
            break;
        }
        case "v1::SecretList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "SecretList" }
                : { group, version, kind: "SecretList" };
            pulumiType = "kubernetes:core/v1:SecretList";
            filter = <any>k8s.core.v1.SecretList.isInstance;
            break;
        }
        case "v1::Service": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Service" }
                : { group, version, kind: "Service" };
            pulumiType = "kubernetes:core/v1:Service";
            filter = <any>k8s.core.v1.Service.isInstance;
            break;
        }
        case "v1::ServiceAccount": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceAccount" }
                : { group, version, kind: "ServiceAccount" };
            pulumiType = "kubernetes:core/v1:ServiceAccount";
            filter = <any>k8s.core.v1.ServiceAccount.isInstance;
            break;
        }
        case "v1::ServiceAccountList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceAccountList" }
                : { group, version, kind: "ServiceAccountList" };
            pulumiType = "kubernetes:core/v1:ServiceAccountList";
            filter = <any>k8s.core.v1.ServiceAccountList.isInstance;
            break;
        }
        case "v1::ServiceList": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ServiceList" }
                : { group, version, kind: "ServiceList" };
            pulumiType = "kubernetes:core/v1:ServiceList";
            filter = <any>k8s.core.v1.ServiceList.isInstance;
            break;
        }
        case "discovery.k8s.io/v1alpha1::EndpointSlice": {
            const [group, version] = "discovery.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointSlice" }
                : { group, version, kind: "EndpointSlice" };
            pulumiType = "kubernetes:discovery.k8s.io/v1alpha1:EndpointSlice";
            filter = <any>k8s.discovery.v1alpha1.EndpointSlice.isInstance;
            break;
        }
        case "discovery.k8s.io/v1alpha1::EndpointSliceList": {
            const [group, version] = "discovery.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EndpointSliceList" }
                : { group, version, kind: "EndpointSliceList" };
            pulumiType = "kubernetes:discovery.k8s.io/v1alpha1:EndpointSliceList";
            filter = <any>k8s.discovery.v1alpha1.EndpointSliceList.isInstance;
            break;
        }
        case "events.k8s.io/v1beta1::Event": {
            const [group, version] = "events.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Event" }
                : { group, version, kind: "Event" };
            pulumiType = "kubernetes:events.k8s.io/v1beta1:Event";
            filter = <any>k8s.events.v1beta1.Event.isInstance;
            break;
        }
        case "events.k8s.io/v1beta1::EventList": {
            const [group, version] = "events.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "EventList" }
                : { group, version, kind: "EventList" };
            pulumiType = "kubernetes:events.k8s.io/v1beta1:EventList";
            filter = <any>k8s.events.v1beta1.EventList.isInstance;
            break;
        }
        case "extensions/v1beta1::DaemonSet": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSet" }
                : { group, version, kind: "DaemonSet" };
            pulumiType = "kubernetes:extensions/v1beta1:DaemonSet";
            filter = <any>k8s.extensions.v1beta1.DaemonSet.isInstance;
            break;
        }
        case "extensions/v1beta1::DaemonSetList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DaemonSetList" }
                : { group, version, kind: "DaemonSetList" };
            pulumiType = "kubernetes:extensions/v1beta1:DaemonSetList";
            filter = <any>k8s.extensions.v1beta1.DaemonSetList.isInstance;
            break;
        }
        case "extensions/v1beta1::Deployment": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Deployment" }
                : { group, version, kind: "Deployment" };
            pulumiType = "kubernetes:extensions/v1beta1:Deployment";
            filter = <any>k8s.extensions.v1beta1.Deployment.isInstance;
            break;
        }
        case "extensions/v1beta1::DeploymentList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "DeploymentList" }
                : { group, version, kind: "DeploymentList" };
            pulumiType = "kubernetes:extensions/v1beta1:DeploymentList";
            filter = <any>k8s.extensions.v1beta1.DeploymentList.isInstance;
            break;
        }
        case "extensions/v1beta1::Ingress": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Ingress" }
                : { group, version, kind: "Ingress" };
            pulumiType = "kubernetes:extensions/v1beta1:Ingress";
            filter = <any>k8s.extensions.v1beta1.Ingress.isInstance;
            break;
        }
        case "extensions/v1beta1::IngressList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "IngressList" }
                : { group, version, kind: "IngressList" };
            pulumiType = "kubernetes:extensions/v1beta1:IngressList";
            filter = <any>k8s.extensions.v1beta1.IngressList.isInstance;
            break;
        }
        case "extensions/v1beta1::NetworkPolicy": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicy" }
                : { group, version, kind: "NetworkPolicy" };
            pulumiType = "kubernetes:extensions/v1beta1:NetworkPolicy";
            filter = <any>k8s.extensions.v1beta1.NetworkPolicy.isInstance;
            break;
        }
        case "extensions/v1beta1::NetworkPolicyList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicyList" }
                : { group, version, kind: "NetworkPolicyList" };
            pulumiType = "kubernetes:extensions/v1beta1:NetworkPolicyList";
            filter = <any>k8s.extensions.v1beta1.NetworkPolicyList.isInstance;
            break;
        }
        case "extensions/v1beta1::PodSecurityPolicy": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicy" }
                : { group, version, kind: "PodSecurityPolicy" };
            pulumiType = "kubernetes:extensions/v1beta1:PodSecurityPolicy";
            filter = <any>k8s.extensions.v1beta1.PodSecurityPolicy.isInstance;
            break;
        }
        case "extensions/v1beta1::PodSecurityPolicyList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicyList" }
                : { group, version, kind: "PodSecurityPolicyList" };
            pulumiType = "kubernetes:extensions/v1beta1:PodSecurityPolicyList";
            filter = <any>k8s.extensions.v1beta1.PodSecurityPolicyList.isInstance;
            break;
        }
        case "extensions/v1beta1::ReplicaSet": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSet" }
                : { group, version, kind: "ReplicaSet" };
            pulumiType = "kubernetes:extensions/v1beta1:ReplicaSet";
            filter = <any>k8s.extensions.v1beta1.ReplicaSet.isInstance;
            break;
        }
        case "extensions/v1beta1::ReplicaSetList": {
            const [group, version] = "extensions/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ReplicaSetList" }
                : { group, version, kind: "ReplicaSetList" };
            pulumiType = "kubernetes:extensions/v1beta1:ReplicaSetList";
            filter = <any>k8s.extensions.v1beta1.ReplicaSetList.isInstance;
            break;
        }
        case "v1::Status": {
            const [group, version] = "v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Status" }
                : { group, version, kind: "Status" };
            pulumiType = "kubernetes:core/v1:Status";
            filter = <any>k8s.meta.v1.Status.isInstance;
            break;
        }
        case "networking.k8s.io/v1::NetworkPolicy": {
            const [group, version] = "networking.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicy" }
                : { group, version, kind: "NetworkPolicy" };
            pulumiType = "kubernetes:networking.k8s.io/v1:NetworkPolicy";
            filter = <any>k8s.networking.v1.NetworkPolicy.isInstance;
            break;
        }
        case "networking.k8s.io/v1::NetworkPolicyList": {
            const [group, version] = "networking.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "NetworkPolicyList" }
                : { group, version, kind: "NetworkPolicyList" };
            pulumiType = "kubernetes:networking.k8s.io/v1:NetworkPolicyList";
            filter = <any>k8s.networking.v1.NetworkPolicyList.isInstance;
            break;
        }
        case "networking.k8s.io/v1beta1::Ingress": {
            const [group, version] = "networking.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Ingress" }
                : { group, version, kind: "Ingress" };
            pulumiType = "kubernetes:networking.k8s.io/v1beta1:Ingress";
            filter = <any>k8s.networking.v1beta1.Ingress.isInstance;
            break;
        }
        case "networking.k8s.io/v1beta1::IngressList": {
            const [group, version] = "networking.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "IngressList" }
                : { group, version, kind: "IngressList" };
            pulumiType = "kubernetes:networking.k8s.io/v1beta1:IngressList";
            filter = <any>k8s.networking.v1beta1.IngressList.isInstance;
            break;
        }
        case "node.k8s.io/v1alpha1::RuntimeClass": {
            const [group, version] = "node.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClass" }
                : { group, version, kind: "RuntimeClass" };
            pulumiType = "kubernetes:node.k8s.io/v1alpha1:RuntimeClass";
            filter = <any>k8s.node.v1alpha1.RuntimeClass.isInstance;
            break;
        }
        case "node.k8s.io/v1alpha1::RuntimeClassList": {
            const [group, version] = "node.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClassList" }
                : { group, version, kind: "RuntimeClassList" };
            pulumiType = "kubernetes:node.k8s.io/v1alpha1:RuntimeClassList";
            filter = <any>k8s.node.v1alpha1.RuntimeClassList.isInstance;
            break;
        }
        case "node.k8s.io/v1beta1::RuntimeClass": {
            const [group, version] = "node.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClass" }
                : { group, version, kind: "RuntimeClass" };
            pulumiType = "kubernetes:node.k8s.io/v1beta1:RuntimeClass";
            filter = <any>k8s.node.v1beta1.RuntimeClass.isInstance;
            break;
        }
        case "node.k8s.io/v1beta1::RuntimeClassList": {
            const [group, version] = "node.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RuntimeClassList" }
                : { group, version, kind: "RuntimeClassList" };
            pulumiType = "kubernetes:node.k8s.io/v1beta1:RuntimeClassList";
            filter = <any>k8s.node.v1beta1.RuntimeClassList.isInstance;
            break;
        }
        case "policy/v1beta1::PodDisruptionBudget": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodDisruptionBudget" }
                : { group, version, kind: "PodDisruptionBudget" };
            pulumiType = "kubernetes:policy/v1beta1:PodDisruptionBudget";
            filter = <any>k8s.policy.v1beta1.PodDisruptionBudget.isInstance;
            break;
        }
        case "policy/v1beta1::PodDisruptionBudgetList": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodDisruptionBudgetList" }
                : { group, version, kind: "PodDisruptionBudgetList" };
            pulumiType = "kubernetes:policy/v1beta1:PodDisruptionBudgetList";
            filter = <any>k8s.policy.v1beta1.PodDisruptionBudgetList.isInstance;
            break;
        }
        case "policy/v1beta1::PodSecurityPolicy": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicy" }
                : { group, version, kind: "PodSecurityPolicy" };
            pulumiType = "kubernetes:policy/v1beta1:PodSecurityPolicy";
            filter = <any>k8s.policy.v1beta1.PodSecurityPolicy.isInstance;
            break;
        }
        case "policy/v1beta1::PodSecurityPolicyList": {
            const [group, version] = "policy/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodSecurityPolicyList" }
                : { group, version, kind: "PodSecurityPolicyList" };
            pulumiType = "kubernetes:policy/v1beta1:PodSecurityPolicyList";
            filter = <any>k8s.policy.v1beta1.PodSecurityPolicyList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole";
            filter = <any>k8s.rbac.v1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleList";
            filter = <any>k8s.rbac.v1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:Role";
            filter = <any>k8s.rbac.v1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding";
            filter = <any>k8s.rbac.v1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleBindingList";
            filter = <any>k8s.rbac.v1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1:RoleList";
            filter = <any>k8s.rbac.v1.RoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole";
            filter = <any>k8s.rbac.v1alpha1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleList";
            filter = <any>k8s.rbac.v1alpha1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:Role";
            filter = <any>k8s.rbac.v1alpha1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding";
            filter = <any>k8s.rbac.v1alpha1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBindingList";
            filter = <any>k8s.rbac.v1alpha1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1alpha1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleList";
            filter = <any>k8s.rbac.v1alpha1.RoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRole": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRole" }
                : { group, version, kind: "ClusterRole" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole";
            filter = <any>k8s.rbac.v1beta1.ClusterRole.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBinding" }
                : { group, version, kind: "ClusterRoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleBindingList" }
                : { group, version, kind: "ClusterRoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingList";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::ClusterRoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "ClusterRoleList" }
                : { group, version, kind: "ClusterRoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleList";
            filter = <any>k8s.rbac.v1beta1.ClusterRoleList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::Role": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "Role" }
                : { group, version, kind: "Role" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:Role";
            filter = <any>k8s.rbac.v1beta1.Role.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleBinding": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBinding" }
                : { group, version, kind: "RoleBinding" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding";
            filter = <any>k8s.rbac.v1beta1.RoleBinding.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleBindingList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleBindingList" }
                : { group, version, kind: "RoleBindingList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingList";
            filter = <any>k8s.rbac.v1beta1.RoleBindingList.isInstance;
            break;
        }
        case "rbac.authorization.k8s.io/v1beta1::RoleList": {
            const [group, version] = "rbac.authorization.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "RoleList" }
                : { group, version, kind: "RoleList" };
            pulumiType = "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleList";
            filter = <any>k8s.rbac.v1beta1.RoleList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1:PriorityClass";
            filter = <any>k8s.scheduling.v1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1:PriorityClassList";
            filter = <any>k8s.scheduling.v1.PriorityClassList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1alpha1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1alpha1:PriorityClass";
            filter = <any>k8s.scheduling.v1alpha1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1alpha1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1alpha1:PriorityClassList";
            filter = <any>k8s.scheduling.v1alpha1.PriorityClassList.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1beta1::PriorityClass": {
            const [group, version] = "scheduling.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClass" }
                : { group, version, kind: "PriorityClass" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1beta1:PriorityClass";
            filter = <any>k8s.scheduling.v1beta1.PriorityClass.isInstance;
            break;
        }
        case "scheduling.k8s.io/v1beta1::PriorityClassList": {
            const [group, version] = "scheduling.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PriorityClassList" }
                : { group, version, kind: "PriorityClassList" };
            pulumiType = "kubernetes:scheduling.k8s.io/v1beta1:PriorityClassList";
            filter = <any>k8s.scheduling.v1beta1.PriorityClassList.isInstance;
            break;
        }
        case "settings.k8s.io/v1alpha1::PodPreset": {
            const [group, version] = "settings.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodPreset" }
                : { group, version, kind: "PodPreset" };
            pulumiType = "kubernetes:settings.k8s.io/v1alpha1:PodPreset";
            filter = <any>k8s.settings.v1alpha1.PodPreset.isInstance;
            break;
        }
        case "settings.k8s.io/v1alpha1::PodPresetList": {
            const [group, version] = "settings.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "PodPresetList" }
                : { group, version, kind: "PodPresetList" };
            pulumiType = "kubernetes:settings.k8s.io/v1alpha1:PodPresetList";
            filter = <any>k8s.settings.v1alpha1.PodPresetList.isInstance;
            break;
        }
        case "storage.k8s.io/v1::StorageClass": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClass" }
                : { group, version, kind: "StorageClass" };
            pulumiType = "kubernetes:storage.k8s.io/v1:StorageClass";
            filter = <any>k8s.storage.v1.StorageClass.isInstance;
            break;
        }
        case "storage.k8s.io/v1::StorageClassList": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClassList" }
                : { group, version, kind: "StorageClassList" };
            pulumiType = "kubernetes:storage.k8s.io/v1:StorageClassList";
            filter = <any>k8s.storage.v1.StorageClassList.isInstance;
            break;
        }
        case "storage.k8s.io/v1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1:VolumeAttachment";
            filter = <any>k8s.storage.v1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1.VolumeAttachmentList.isInstance;
            break;
        }
        case "storage.k8s.io/v1alpha1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1alpha1:VolumeAttachment";
            filter = <any>k8s.storage.v1alpha1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1alpha1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1alpha1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1alpha1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1alpha1.VolumeAttachmentList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSIDriver": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSIDriver" }
                : { group, version, kind: "CSIDriver" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSIDriver";
            filter = <any>k8s.storage.v1beta1.CSIDriver.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSIDriverList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSIDriverList" }
                : { group, version, kind: "CSIDriverList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSIDriverList";
            filter = <any>k8s.storage.v1beta1.CSIDriverList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSINode": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSINode" }
                : { group, version, kind: "CSINode" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSINode";
            filter = <any>k8s.storage.v1beta1.CSINode.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::CSINodeList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "CSINodeList" }
                : { group, version, kind: "CSINodeList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:CSINodeList";
            filter = <any>k8s.storage.v1beta1.CSINodeList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::StorageClass": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClass" }
                : { group, version, kind: "StorageClass" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:StorageClass";
            filter = <any>k8s.storage.v1beta1.StorageClass.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::StorageClassList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "StorageClassList" }
                : { group, version, kind: "StorageClassList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:StorageClassList";
            filter = <any>k8s.storage.v1beta1.StorageClassList.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::VolumeAttachment": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachment" }
                : { group, version, kind: "VolumeAttachment" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:VolumeAttachment";
            filter = <any>k8s.storage.v1beta1.VolumeAttachment.isInstance;
            break;
        }
        case "storage.k8s.io/v1beta1::VolumeAttachmentList": {
            const [group, version] = "storage.k8s.io/v1beta1".split("/");
            gvk = version === undefined
                ? { group: "", version: group, kind: "VolumeAttachmentList" }
                : { group, version, kind: "VolumeAttachmentList" };
            pulumiType = "kubernetes:storage.k8s.io/v1beta1:VolumeAttachmentList";
            filter = <any>k8s.storage.v1beta1.VolumeAttachmentList.isInstance;
            break;
        }
        default:
            throw new Error(`Can't list unsupported type '${apiVersion}::${kind}'`);
    }

    const resources = streamInvoke("kubernetes:kubernetes:watch", gvk);

    for await (const {object, type} of await resources) {
        const typed = { ...object, __pulumiType: pulumiType };
        if (filter(typed)) {
            yield { object: typed, type } as WatchEvent<ResolvedResource<U>>;
        }
    }
}

export class ResourceSet<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never> {
    static toResourceSet<T extends { metadata?: k8s.types.output.meta.v1.ObjectMeta }>(
        acc: Map<string, T>,
        e: WatchEvent<T>,
    ): Map<string, T> {
        const { object } = e;
        const [ns, name] = [object.metadata!.namespace!, object.metadata!.name!];
        acc.set(`${ns}/${name}`, object);
        return acc;
    }

    constructor(watches: [AsyncIterable<A>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>, AsyncIterable<F>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>, AsyncIterable<F>, AsyncIterable<G>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>, AsyncIterable<F>, AsyncIterable<G>, AsyncIterable<H>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>, AsyncIterable<F>, AsyncIterable<G>, AsyncIterable<H>, AsyncIterable<I>])
    constructor(watches: [AsyncIterable<A>, AsyncIterable<B>, AsyncIterable<C>, AsyncIterable<D>, AsyncIterable<E>, AsyncIterable<F>, AsyncIterable<G>, AsyncIterable<H>, AsyncIterable<I>, AsyncIterable<J>])
    constructor(private watches: AsyncIterable<any>[]) {}

    public onUpdate(callback: (sets: [query.AsyncQueryable<A>, query.AsyncQueryable<B>, query.AsyncQueryable<C>, query.AsyncQueryable<D>, query.AsyncQueryable<E>, query.AsyncQueryable<F>, query.AsyncQueryable<G>, query.AsyncQueryable<H>, query.AsyncQueryable<I>, query.AsyncQueryable<J>]) => void): void;
    public onUpdate(callback: (sets: any) => void): void {
        const watches = this.watches.map(w => {
            const subject = new rx.Subject<any>();
            (async () => {
                for await (const resource of w) {
                    subject.next(resource);
                }
            })();
            return subject.pipe(
                scan(ResourceSet.toResourceSet, new Map()),
                map(m => query.from(() => m.values())),
            );
        });

        (async () => {
            rx.combineLatest(...watches).forEach(callback);
        })();
    }
}
